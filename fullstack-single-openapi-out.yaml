openapi: 3.0.1
info:
  title: Media Owner Full-Stack API
  description: >
    Viooh Central Media Owner Full Stack API

    <table style="border-collapse:collapse;border-color:#9ABAD9;border-spacing:0" class="tg">
        <thead>
        <tr>
            <th style="background-color:#65afff;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#fff;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;position:-webkit-sticky;position:sticky;text-align:center;top:-1px;vertical-align:top;will-change:transform;word-break:normal">
                Version
            </th>
            <th style="background-color:#65afff;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#fff;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;position:-webkit-sticky;position:sticky;text-align:center;top:-1px;vertical-align:top;will-change:transform;word-break:normal">
                Date
            </th>
            <th style="background-color:#65afff;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#fff;font-family:Arial, sans-serif;font-size:14px;font-weight:bold;overflow:hidden;padding:10px 5px;position:-webkit-sticky;position:sticky;text-align:center;top:-1px;vertical-align:top;will-change:transform;word-break:normal">
                Description
            </th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.0
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.03.01
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Initial Version
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.1
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.07.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                List Endpoints Added With Paging And Sorting Functionality
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.2
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.07.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Network Endpoints Addded
            </td>
            </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.3
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.08.05
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Product Endpoints Addded
            </td>
            </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.4
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.08.21
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Characteristic Endpoints Addded
            </td>
            </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.5
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.09.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                List Assets with Relational Search
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.6
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.09.06
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                DigitalSpec Characteristic Support Added
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.7
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.10.14
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                New Fields (indoor, deal_api_enabled, venue_type) Added to Asset Model
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.8
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.10.15
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                LoopPolicy SlotDuration Default Value Updated From 0 To 10
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.9
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.10.20
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Offer Mask Added in Asset Offer
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.10
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.11.26
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Pricing Type Added in VC
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.11
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.11.23
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                FrameAltCode Added in Asset
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.12
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.11.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Remove format:UUID for MO Full-Stack API Open API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.13
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2020.11.30
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Remove product_category_group_uuid for ProductCategoryGetResponse and add product_category_uuid
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.14
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.01.05
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Converted Binary OfferMask value to more meaningful CSV format
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.15
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.02.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Changed DigitalSpec services description with pixels
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.16
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.02.08
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Decommission TimeZone functionality from MO Full Stack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.17
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.03.30
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Asset Patch Post Migration API added in MO Full Stack API
            </td>
          </tr>
          <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.18
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.05.07
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Programmatic Network API added in MO Full Stack API
            </td>
            </tr>
            <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.19
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.17
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete AudienceCategoryGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.20
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete AudienceCategory endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.21
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Programmatic Network URL field added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.22
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Add DELETE method for DayPartGroup endpoint in Full Stack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.23
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.20
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete endpoint added in MO Full Stack Network Endpoint
            </td>
         </tr>
         <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.24
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete ProductCategory endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.14
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete ProductGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.26
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.14
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Product endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.27
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.15
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete AssignedTo endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.28
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.15
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete SalesTeam endpoint added in MO Fullstack API
            </td>
        </tr>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.29
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete DayPart endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.30
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.16
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Person endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.31
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.26
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete endpoint added in MO Full Stack Channel Endpoint
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.32
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.10
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete endpoint added in MO Full Stack ProductFormatMarketings Endpoint
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.33
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.17
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Brand endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.34
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.01
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete ProductFormat endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.35
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.01
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete BusinessAreaGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
            1.0.36
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.22
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Country endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.37
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.12
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Venue taxonomy changes
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.38
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.13
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Programmatic Network endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.39
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.13
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete DigitalSpec endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.40
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.19
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Tag endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
            1.0.41
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.19
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete NetworkPriceDefinition endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.42
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.19
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete TagGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.43
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.11
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Postcode endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.44
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.20
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete BusinessDivision endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.45
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.20
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete RevenueStream endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.46
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.09.07
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete BusinessArea endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.47
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.21
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete NetworkGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
              <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                  1.0.48
              </td>
              <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                  2021.08.17
              </td>
              <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                  Delete endpoint added in MO Full Stack InvoiceType Endpoint
              </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.49
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.22
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete ProductCategoryFamily endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.50
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.08.31
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete endpoint added in MO Full Stack PricingType Endpoint
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.51
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.22
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete ProductCategoryClass endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.52
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.22
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete ProductCategoryGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.53
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                 Delete Organisation endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.54
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete OrganisationContact endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.55
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete OrganisationGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.56
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Model endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.57
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.02
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete LoopPolicy endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.58
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.04
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete CharacteristicGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.59
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.13
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Characteristic endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.60
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.10
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete FrameOrientation endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.61
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.10.13
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete TvArea endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.62
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.11
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete FrameSizeFamily endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.63
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.04
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Conurbation endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.64
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.12
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete FrameSize endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.65
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.17
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Town endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.66
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.17
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete RouteTownm endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.67
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.25
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete County endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.68
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.26
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PoiType endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.69
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.11.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete District endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.70
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.01
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PoiCategory endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.71
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Trademark endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.72
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PoiBrand endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.73
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete BusinessActivity endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.74
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete SiteType endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.75
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.06
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PostalArea endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.76
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.06
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PostalDistrict endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.77
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.03
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PostalSector endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.78
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete Family endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.79
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete GeographicalAreaGroup endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.80
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.10
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PoiSubCategory endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.81
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.010
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete SubFamily endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.82
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete GeographicalAreaLevel endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.83
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.10
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete PoiLocation endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.84
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.09
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Delete GeographicalArea endpoint added in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.85
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2021.12.23
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Additional fields for Asset response in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.86
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2022.01.26
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Decommission 'asset/search' service in MO Fullstack API
            </td>
        </tr>
        <tr>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                1.0.87
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                2022.02.18
            </td>
            <td style="background-color:#EBF5FF;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#444;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:top;word-break:normal">
                Separated request and response asset objects in MO Fullstack API
            </td>
        </tr>
        </tbody>
    </table>
  version: V1.0
  x-api-id: d0184f38-b98d-11e7-9c56-68f728c1ba70
  x-audience: external-partner
  termsOfService: http://viooh.com/terms/
  contact:
    name: API Support
    url: http://www.viooh.com/support
    email: support@viooh.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.viooh.com/fs/v1
    description: Production Server
tags:
  - name: Header
    x-displayName: Header
    description: >
      For all calls made to the VIOOH API after authentication, it is mandatory
      to include 'env-id' in the header of each call. Value of the env-id will
      be provided by VIOOH.
  - name: Asset
    x-displayName: Asset
    description: |
      Create and manage your Asset
  - name: Asset Duplication
    x-displayName: Asset Duplication
    description: |
      Create and manage your Asset Duplication
  - name: Asset Post Migration Patch
    x-displayName: Asset Post Migration
    description: >
      Update Asset with specific fields(DigitalSpce, Indoor, Dealer_Api_Enabled,
      Venue_Type) post migration
  - name: Linked Assets
    x-displayName: Linked Assets
    description: |
      Create and manage your Linked Assets
  - name: Visual Units
    x-displayName: Visual Units
    description: |
      Create and manage your Visual Units
  - name: Business Activity
    x-displayName: Business Activity
    description: |
      Create and manage your Business Activity
  - name: Digital Spec
    x-displayName: Digital Spec
    description: |
      Create and manage your Digital Spec
  - name: Family
    x-displayName: Family
    description: |
      Create and manage your Family
  - name: Frame Orientation
    x-displayName: Frame Orientation
    description: |
      Create and manage your Frame Orientation
  - name: Frame Size
    x-displayName: Frame Size
    description: |
      Create and manage your Frame Size
  - name: Frame Size Family
    x-displayName: Frame Size Family
    description: |
      Create and manage your Frame Size Family
  - name: Loop Policy
    x-displayName: Loop Policy
    description: |
      Create and manage your Loop Policy
  - name: Model
    x-displayName: Model
    description: |
      Create and manage your Model
  - name: Site Type
    x-displayName: Site Type
    description: |
      Create and manage your Site Type
  - name: SubFamily
    x-displayName: SubFamily
    description: |
      Create and manage your SubFamily
  - name: Tag
    x-displayName: Tag
    description: |
      Create and manage your Tag
  - name: Tag Group
    x-displayName: Tag Group
    description: |
      Create and manage your Tag Group
  - name: Trademark
    x-displayName: Trademark
    description: |
      Create and manage your Trademark
  - name: Audience Category
    x-displayName: Audience Category
    description: |
      Create and manage your Audience Category
  - name: Audience Category Group
    x-displayName: Audience Category Group
    description: |
      Create and manage your Audience Category Group
  - name: Assigned To
    x-displayName: Assigned To
    description: |
      Create and manage your Assigned To
  - name: Brand
    x-displayName: Brand
    description: |
      Create and manage your Brand
  - name: Organisation
    x-displayName: Organisation
    description: |
      Create and manage your Organisation
  - name: Organisation Contact
    x-displayName: Organisation Contact
    description: |
      Create and manage your Organisation Contact
  - name: Organisation Group
    x-displayName: Organisation Group
    description: |
      Create and manage your Organisation Group
  - name: Person
    x-displayName: Person
    description: |
      Create and manage your Person
  - name: Product Category
    x-displayName: Product Category
    description: |
      Create and manage your Product Category
  - name: Product Category Class
    x-displayName: Product Category Class
    description: |
      Create and manage your Product Category Class
  - name: Product Category Family
    x-displayName: Product Category Family
    description: |
      Create and manage your Product Category Family
  - name: Product Category Group
    x-displayName: Product Category Group
    description: |
      Create and manage your Product Category Group
  - name: Sales Team
    x-displayName: Sales Team
    description: |
      Create and manage your Sales Team
  - name: Conurbation
    x-displayName: Conurbation
    description: |
      Create and manage your Conurbation
  - name: County
    x-displayName: County
    description: |
      Create and manage your County
  - name: Country
    x-displayName: Country
    description: |
      Create and manage your Country
  - name: District
    x-displayName: District
    description: |
      Create and manage your District
  - name: Geographical Area
    x-displayName: Geographical Area
    description: |
      Create and manage your Geographical Area
  - name: Geographical Area Group
    x-displayName: Geographical Area Group
    description: |
      Create and manage your Geographical Area Group
  - name: Geographical Area Level
    x-displayName: Geographical Area Level
    description: |
      Create and manage your Geographical Area Level
  - name: Route Town
    x-displayName: Route Town
    description: |
      Create and manage your Route Town
  - name: Post Code
    x-displayName: Post Code
    description: |
      Create and manage your Post Code
  - name: Postal Area
    x-displayName: Postal Area
    description: |
      Create and manage your Postal Area
  - name: Postal District
    x-displayName: Postal District
    description: |
      Create and manage your Postal District
  - name: Postal Sector
    x-displayName: Postal Sector
    description: |
      Create and manage your Postal Sector
  - name: Town
    x-displayName: Town
    description: |
      Create and manage your Town
  - name: Tv Area
    x-displayName: Tv Area
    description: |
      Create and manage your Tv Area
  - name: Poi Brand
    x-displayName: Poi Brand
    description: |
      Create and manage your Poi Brand
  - name: Poi Category
    x-displayName: Poi Category
    description: |
      Create and manage your Poi Category
  - name: Poi Location
    x-displayName: Poi Location
    description: |
      Create and manage your Poi Location
  - name: Poi Sub Category
    x-displayName: Poi Sub Category
    description: |
      Create and manage your Poi Sub Category
  - name: Poi Type
    x-displayName: Poi Type
    description: |
      Create and manage your Poi Type
  - name: Business Area
    x-displayName: Business Area
    description: |
      Create and manage your Business Area
  - name: Business Area Group
    x-displayName: Business Area Group
    description: |
      Create and manage your Business Area Group
  - name: Business Division
    x-displayName: Business Division
    description: |
      Create and manage your Business Division
  - name: Channel
    x-displayName: Channel
    description: |
      Create and manage your Channel
  - name: Day Part
    x-displayName: Day Part
    description: |
      Create and manage your Day Part
  - name: Day Part Group
    x-displayName: Day Part Group
    description: |
      Create and manage your Day Part Group
  - name: Invoicing Type
    x-displayName: Invoicing Type
    description: |
      Create and manage your Invoicing Type
  - name: Pricing Type
    x-displayName: Pricing Type
    description: |
      Create and manage your Pricing Type
  - name: Product Format
    x-displayName: Product Format
    description: |
      Create and manage your Product Format
  - name: ProductFormat Marketing
    x-displayName: ProductFormat Marketing
    description: |
      Create and manage your ProductFormat Marketing
  - name: Revenue Stream
    x-displayName: Revenue Stream
    description: |
      Create and manage your Revenue Stream
  - name: Network
    x-displayName: Network
    description: |
      Create and manage your Network
  - name: Network Group
    x-displayName: Network Group
    description: |
      Create and manage your Network Group
  - name: Network Price Definition
    x-displayName: Network Price Definition
    description: |
      Create and manage your Network Price Definition
  - name: Product
    x-displayName: Product
    description: |
      Create and manage your Product
  - name: Product Group
    x-displayName: Product Group
    description: |
      Create and manage your Product Group
  - name: Characteristic
    x-displayName: Characteristic
    description: |
      Create and manage your Characteristic
  - name: Characteristic Group
    x-displayName: Characteristic Group
    description: |
      Create and manage your Characteristic Group
  - name: Programmatic Network
    x-displayName: Programmatic Network
    description: |
      Create and manage your Programmatic Network
x-tagGroups:
  - name: Header
    tags:
      - Header
  - name: Asset Management
    tags:
      - Asset
      - Asset Duplication
      - Linked Assets
      - Visual Units
  - name: Asset Reference Management
    tags:
      - Business Activity
      - Digital Spec
      - Family
      - Frame Orientation
      - Frame Size
      - Frame Size Family
      - Loop Policy
      - Model
      - Site Type
      - SubFamily
      - Tag
      - Tag Group
      - Trademark
      - Network
      - Network Group
      - Network Price Definition
      - Product
      - Product Group
      - Characteristic
      - Characteristic Group
      - Programmatic Network
  - name: Audience Management
    tags:
      - Audience Category
      - Audience Category Group
  - name: Commercial Entities Management
    tags:
      - Assigned To
      - Brand
      - Organisation
      - Organisation Contact
      - Organisation Group
      - Person
      - Product Category
      - Product Category Class
      - Product Category Family
      - Product Category Group
      - Sales Team
  - name: Location Management
    tags:
      - Conurbation
      - County
      - Country
      - District
      - Geographical Area
      - Geographical Area Group
      - Geographical Area Level
      - Route Town
      - Post Code
      - Postal Area
      - Postal District
      - Postal Sector
      - Town
      - Tv Area
  - name: POI Management
    tags:
      - Poi Brand
      - Poi Category
      - Poi Location
      - Poi Sub Category
      - Poi Type
  - name: Product Management
    tags:
      - Business Area
      - Business Area Group
      - Business Division
      - Channel
      - Day Part
      - Day Part Group
      - Invoicing Type
      - Pricing Type
      - Product Format
      - ProductFormat Marketing
      - Revenue Stream
paths:
  /audienceCategoryGroups:
    get:
      operationId: getAllAudienceCategoryGroup
      tags:
        - Audience Category Group
      summary: Get All Audience Category Group
      description: Returns list of Audience Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Audience Category Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  audience_category_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D/get\
                        /responses/200/content/application~1json/schema"
                    description: List of the AudienceCategoryGroup
  "/audienceCategoryGroups/{audience-category-group-uuid}/audienceCategories":
    get:
      operationId: getAllAudienceCategoriesByGroup
      tags:
        - Audience Category Group
      summary: Get All Audience Category Under a Group
      description: Returns list of Audience Category Under a Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `audience_category_uuid`  - It takes String value
             * `description` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Audience Category Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  audience_category_list:
                    type: array
                    items:
                      $ref: "#/paths/~1audienceCategories~1%7Baudience-category-uuid%7D/get/responses\
                        /200/content/application~1json/schema"
                    description: List of the AudienceCategory
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - error_type
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                  error_type:
                    type: string
                    enum:
                      - DEFAULT
                      - MISSING_ENVIRONMENT_ID
                      - INVALID_ENVIRONMENT_ID
                      - INVALID_REFERENCED_OBJECT
                      - INVALID_REQUEST_INPUT
                      - INVALID_PATH_VARIABLE
                      - DEFAULT_OBJECT_MANIPULATION_NOT_ALLOWED
                      - INVALID_REQUEST_PARAM
                      - INVALID_PARENT_REFERENCE
                  message:
                    type: string
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-group-uuid must be between 1 and 50
  "/audienceCategoryGroups/{audience-category-group-uuid}":
    get:
      operationId: getAudienceCategoryGroupByUUID
      tags:
        - Audience Category Group
      summary: Get Audience Category Group by audience-category-group-uuid
      description: Returns the Audience Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Audience Category Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Audience Category Group
                  - properties:
                      audience_category_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Audience Category Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Audience Category
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category Group could not be
            found in the system
    put:
      operationId: createOrUpdateAudienceCategoryGroupByUUID
      tags:
        - Audience Category Group
      summary: Create Or Update Audience Category Group
      description: Create Or Update Audience Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Audience Category Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: Males Only
      responses:
        "201":
          description: Created if the Audience Category Group not existing before and
            created successfully
        "204":
          description: No Content if the Audience Category Group existing before and
            created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateAudienceCategoryGroupByUUID
      tags:
        - Audience Category Group
      summary: Partial Update Audience Category Group
      description: Partial Update Audience Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Audience Category Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Audience Category Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category Group could not be
            found in the system
    delete:
      operationId: deleteAudienceCategoryGroupByUUID
      tags:
        - Audience Category Group
      summary: Delete Audience Category Group by audience-category-group-uuid
      description: Sets the Audience Category Group to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Audience Category Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category Group could not be
            found in the system
  /audienceCategories:
    get:
      operationId: getAllAudienceCategory
      tags:
        - Audience Category
      summary: Get All Audience Category
      description: Returns list of Audience Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `description` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Audience Category
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/200/content/application~1json/\
                  schema"
  "/audienceCategories/{audience-category-uuid}":
    get:
      operationId: getAudienceCategoryByUUID
      tags:
        - Audience Category
      summary: Get Audience Category by audience-group-uuid
      description: Returns the Audience Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Audience Category
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Audience Category
                      description:
                        type: string
                        minLength: 0
                        maxLength: 255
                        description: Description of the Audience Category
                      audience_category_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Audience Category Group
                      parent_audience_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Parent Audience Category
                    example:
                      audience_category_group_uuid: Males
                      name: Males Between 20 and 40
                      description: Audience Category of the males between age of 20 and 40
                  - properties:
                      audience_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Audience Category
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Audience Category
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category could not be found in
            the system
    put:
      operationId: createOrUpdateAudienceCategoryByUUID
      tags:
        - Audience Category
      summary: Create Or Update Audience Category
      description: Create Or Update Audience Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Audience Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1audienceCategories~1%7Baudience-category-uuid%7D/get/responses\
                    /200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - audience_category_group_uuid
      responses:
        "201":
          description: Created if the Audience Category not existing before and created
            successfully
        "204":
          description: No Content if the Audience Category existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateAudienceCategoryByUUID
      tags:
        - Audience Category
      summary: Partial Update Audience Category
      description: Partial Update Audience Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Audience Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1audienceCategories~1%7Baudience-category-uuid%7D/get/responses\
                    /200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Audience Category updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category could not be found in
            the system
    delete:
      operationId: deleteAudienceCategoryByUUID
      tags:
        - Audience Category
      summary: Delete Audience Category by audience-category-uuid
      description: Sets the Audience Category to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Audience Category deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Audience Category could not be found in
            the system
  "/audienceCategories/{audience-category-uuid}/channels":
    get:
      operationId: getAllChannelsByAudienceCategorie
      tags:
        - Audience Category
      summary: Get All Channel Under a Audience Categorie
      description: Returns list of Channel Under a Audience Categorie
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: audience-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Categorie
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `day_part_group_uuid` - It takes String value.
             * `channel_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Channel
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  channel_list:
                    type: array
                    items:
                      $ref: "#/paths/~1channels~1%7Bchannel-uuid%7D/get/responses/200/content/applica\
                        tion~1json/schema"
                    description: List of the Channel
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: audience-category-uuid must be between 1 and 50
  /tagGroups:
    get:
      operationId: getAllTagGroup
      tags:
        - Tag Group
      summary: Get All Tag Group
      description: Returns list of Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `tag_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Tag Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1tagGroups~1%7Btag-group-uuid%7D/get/responses/200/content/appl\
                        ication~1json/schema"
                    description: List of the TagGroup
  "/tagGroups/{tag-group-uuid}/tags":
    get:
      operationId: getTagByGroup
      tags:
        - Tag Group
      summary: Get All Tags Under a Tag Group
      description: Returns list of Tags Under a Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Tag under a Tag Group
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_list:
                    type: array
                    items:
                      $ref: "#/paths/~1tags~1%7Btag-uuid%7D/get/responses/200/content/application~1js\
                        on/schema"
                    description: List of the Tag
  "/tagGroups/{tag-group-uuid}":
    get:
      operationId: getTagGroupByUUID
      tags:
        - Tag Group
      summary: Get Tag Group by tag-group-uuid
      description: Returns the Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Tag Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Tag Group
                  - properties:
                      tag_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Tag Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Tag Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tag Group could not be found in the
            system
    put:
      operationId: createOrUpdateTagGroupByUUID
      tags:
        - Tag Group
      summary: Create Or Update Tag Group
      description: Create Or Update Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tag Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tagGroups~1%7Btag-group-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: Males Only
      responses:
        "201":
          description: Created if the Tag Group not existing before and created successfully
        "204":
          description: No Content if the Tag Group existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateTagGroupByUUID
      tags:
        - Tag Group
      summary: Partial Update Tag Group
      description: Partial Update Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tag Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tagGroups~1%7Btag-group-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Tag Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tag Group could not be found in the
            system
    delete:
      operationId: deleteTagGroupByUUID
      tags:
        - Tag Group
      summary: Delete Tag Group
      description: Delete Tag Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Tag Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: TagGroup[...] cannot be deactivated. It is
                  still in use by Tags[...]"
        "404":
          description: Not Found, if the specified Tag Group could not be found in the
            system
  /tags:
    get:
      operationId: getAllTags
      tags:
        - Tag
      summary: Get All Tag
      description: Returns list of Tag
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `tag_group_uuid`  - It takes String value.
             * `tag_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Tag
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1tagGroups~1%7Btag-group-uuid%7D~1tags/get/responses/200/conten\
                  t/application~1json/schema"
  "/tags/{tag-uuid}":
    get:
      operationId: getTagByUUID
      tags:
        - Tag
      summary: Get Tag by tag-uuid
      description: Returns the Tag
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Tag
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Tag
                      tag_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Tag
                    example:
                      tag_group_uuid: Males
                      name: Males Between 20 and 40
                      description: Tag of the males between age of 20 and 40
                  - properties:
                      tag_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Tag
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Tag
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tag could not be found in the system
    put:
      operationId: createOrUpdateTagByUUID
      tags:
        - Tag
      summary: Create Or Update Tag
      description: Create Or Update Tag
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tag
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tags~1%7Btag-uuid%7D/get/responses/200/content/application~1js\
                    on/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - tag_group_uuid
      responses:
        "201":
          description: Created if the Tag not existing before and created successfully
        "204":
          description: No Content if the Tag existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateTagByUUID
      tags:
        - Tag
      summary: Partial Update Tag
      description: Partial Update Tag
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tag
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tags~1%7Btag-uuid%7D/get/responses/200/content/application~1js\
                    on/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Tag updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tag-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tag could not be found in the system
    delete:
      operationId: deleteTagByUUID
      tags:
        - Tag
      summary: Delete Tag
      description: Delete Tag
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tag-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tag
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Tag deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Tag[...] cannot be deactivated. It is still in
                  use by Assets[...]"
        "404":
          description: Not Found, if the specified Tag could not be found in the system
  /networks:
    get:
      operationId: getAllNetworks
      tags:
        - Network
      summary: Get All Network
      description: Returns list of Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `network_group_uuid`  - It takes String value.
             * `network_price_definition_uuid`  - It takes String value.
             * `network_default_quantity`  - It takes Integer value.
             * `network_min_quantity`  - It takes Integer value.
             * `network_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Network
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  network_list:
                    type: array
                    items:
                      $ref: "#/paths/~1networks~1%7Bnetwork-uuid%7D/get/responses/200/content/applica\
                        tion~1json/schema"
                    description: List of the Network
  "/networks/{network-uuid}":
    get:
      operationId: getNetworkByUUID
      tags:
        - Network
      summary: Get Network by network-uuid
      description: Returns the Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Network
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Network
                      network_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Network
                      network_price_definition_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Network Price Definition
                      network_default_quantity:
                        type: integer
                        default: 0
                        description: Default Quantity of the Network
                      network_min_quantity:
                        type: integer
                        default: 0
                        description: Min Quantity of the Network
                    example:
                      network_group_uuid: group
                      network_price_definition_uuid: price definition
                      name: name
                      network_default_quantity: 1
                      network_min_quantity: 0
                  - properties:
                      network_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Network
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Network
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network could not be found in the system
    put:
      operationId: createOrUpdateNetworkByUUID
      tags:
        - Network
      summary: Create Or Update Network
      description: Create Or Update Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networks~1%7Bnetwork-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - network_group_uuid
                    - network_price_definition_uuid
      responses:
        "201":
          description: Created if the Network not existing before and created successfully
        "204":
          description: No Content if the Network existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateNetworkByUUID
      tags:
        - Network
      summary: Partial Update Network
      description: Partial Update Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networks~1%7Bnetwork-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Network updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network could not be found in the system
    delete:
      operationId: deleteNetworkByUUID
      tags:
        - Network
      summary: Delete Network by network-uuid
      description: Delete the Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Network deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Network[...] can not be deactivated. Its still
                  used by Assets[...]"
        "404":
          description: Not Found, if the specified Network could not be found in the system
  /networkGroups:
    get:
      operationId: getAllNetworkGroup
      tags:
        - Network Group
      summary: Get All Network Group
      description: Returns list of Network Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `network_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Network Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  network_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1networkGroups~1%7Bnetwork-group-uuid%7D/get/responses/200/cont\
                        ent/application~1json/schema"
                    description: List of the NetworkGroup
  "/networkGroups/{network-group-uuid}":
    get:
      operationId: getNetworkGroupByUUID
      tags:
        - Network Group
      summary: Get Network Group by network-group-uuid
      description: Returns the Network Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Network Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Network Group
                  - properties:
                      network_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Network Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Network Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network Group could not be found in the
            system
    put:
      operationId: createOrUpdateNetworkGroupByUUID
      tags:
        - Network Group
      summary: Create Or Update Network Group
      description: Create Or Update Network Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networkGroups~1%7Bnetwork-group-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Network Group not existing before and created
            successfully
        "204":
          description: No Content if the Network Group existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateNetworkGroupByUUID
      tags:
        - Network Group
      summary: Partial Update Network Group
      description: Partial Update Network Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networkGroups~1%7Bnetwork-group-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Network Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network Group could not be found in the
            system
    delete:
      operationId: deleteNetworkGroupByUUID
      tags:
        - Network Group
      summary: Delete Network Group
      description: Delete Network Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Network Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: NetworkGroup[...] cannot be deactivated. It is
                  still in use by Networks[...]"
        "404":
          description: Not Found, if the specified Network Group could not be found in the
            system
  /networkPriceDefinitions:
    get:
      operationId: getAllNetworkPriceDefinition
      tags:
        - Network Price Definition
      summary: Get All Network Price Definition
      description: Returns list of Network Price Definition
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `network_price_definition_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Network Price Definition
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  network_price_definition_list:
                    type: array
                    items:
                      $ref: "#/paths/~1networkPriceDefinitions~1%7Bnetwork-price-definition-uuid%7D/g\
                        et/responses/200/content/application~1json/schema"
                    description: List of the NetworkPriceDefinition
  "/networkPriceDefinitions/{network-price-definition-uuid}":
    get:
      operationId: getNetworkPriceDefinitionByUUID
      tags:
        - Network Price Definition
      summary: Get Network Price Definition by network-price-definition-uuid
      description: Returns the Network Price Definition
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-price-definition-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Price Definition
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Network Price Definition
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of Network Price Definition
                      prices:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Network Price
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Network Price
                            days:
                              type: array
                              items:
                                type: string
                                enum:
                                  - MONDAY
                                  - TUESDAY
                                  - WEDNESDAY
                                  - THURSDAY
                                  - FRIDAY
                                  - SATURDAY
                                  - SUNDAY
                            price_cover:
                              type: number
                              format: double
                              minimum: 0
                              default: 100
                              description: Price cover of the Network Price
                            price:
                              type: number
                              format: double
                              minimum: 0
                              default: 0
                              description: Price of the Network Price
                            start_offset:
                              type: integer
                              minimum: 0
                              maximum: 86398
                              description: start_offset of the Network Price
                            end_offset:
                              type: integer
                              minimum: 1
                              maximum: 86399
                              description: end_offset of the Network Price
                          required:
                            - start_date
                            - end_date
                            - days
                            - start_offset
                            - end_offset
                        description: List of the Network Price
                  - properties:
                      network_price_definition_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Network Price Definition
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Network Price Definition
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-price-definition-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network Price Definition could not be
            found in the system
    put:
      operationId: createOrUpdateNetworkPriceDefinitionByUUID
      tags:
        - Network Price Definition
      summary: Create Or Update Network Price Definition
      description: Create Or Update Network Price Definition
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-price-definition-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Price Definition
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network Price Definition
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networkPriceDefinitions~1%7Bnetwork-price-definition-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Network Price Definition not existing before and
            created successfully
        "204":
          description: No Content if the Network Price Definition existing before and
            created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-price-definition-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateNetworkPriceDefinitionByUUID
      tags:
        - Network Price Definition
      summary: Partial Update Network Price Definition
      description: Partial Update Network Price Definition
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-price-definition-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Price Definition
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Network Price Definition
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1networkPriceDefinitions~1%7Bnetwork-price-definition-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Network Price Definition updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: network-price-definition-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Network Price Definition could not be
            found in the system
    delete:
      operationId: deleteNetworkPriceDefinitionByUUID
      tags:
        - Network Price Definition
      summary: Delete Network Price Definition
      description: Delete Network Price Definition
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: network-price-definition-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Network Price Definition
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Network Price Definition deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: NetworkPriceDefinition[...] cannot be
                  deactivated. It is still in use by Networks[...]"
        "404":
          description: Not Found, if the specified Network Price Definition could not be
            found in the system
  /productGroups:
    get:
      operationId: getAllProductGroup
      tags:
        - Product Group
      summary: Get All Product Group
      description: Returns list of Product Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productGroups~1%7Bproduct-group-uuid%7D/get/responses/200/cont\
                        ent/application~1json/schema"
                    description: List of the ProductGroup
  "/productGroups/{product-group-uuid}/products":
    get:
      operationId: getAllProductsByGroup
      tags:
        - Product Group
      summary: Get All Product Under a Group
      description: Returns list of Product Under a Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_group_uuid`  - It takes String value.
             * `product_uuid`  - It takes String value.
             * `product_default_quantity` - It takes Integer value.
             * `product_default_audience` - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_list:
                    type: array
                    items:
                      $ref: "#/paths/~1products~1%7Bproduct-uuid%7D/get/responses/200/content/applica\
                        tion~1json/schema"
                    description: List of the Product
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-group-uuid must be between 1 and 50
  "/productGroups/{product-group-uuid}":
    get:
      operationId: getProductGroupByUUID
      tags:
        - Product Group
      summary: Get Product Group by product-group-uuid
      description: Returns the Product Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Group
                    required:
                      - name
                  - properties:
                      product_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Group could not be found in the
            system
    put:
      operationId: createOrUpdateProductGroupByUUID
      tags:
        - Product Group
      summary: Create Or Update Product Group
      description: Create Or Update Product Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productGroups~1%7Bproduct-group-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: Males Only
      responses:
        "201":
          description: Created if the Product Group not existing before and created
            successfully
        "204":
          description: No Content if the Product Group existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductGroupByUUID
      tags:
        - Product Group
      summary: Partial Update Product Group
      description: Partial Update Product Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productGroups~1%7Bproduct-group-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Group could not be found in the
            system
    delete:
      operationId: deleteProductGroupByUUID
      tags:
        - Product Group
      summary: Delete Product Group by product-group-uuid
      description: Delete the Product Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductGroup[...] can not be deactivated. Its
                  still used by Products[...]"
        "404":
          description: Not Found, if the specified ProductGroup could not be found in the
            system
  /products:
    get:
      operationId: getAllProduct
      tags:
        - Product
      summary: Get All Product
      description: Returns list of Product
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_group_uuid`  - It takes String value.
             * `product_uuid`  - It takes String value.
             * `product_default_quantity` - It takes Integer value.
             * `product_default_audience` - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1productGroups~1%7Bproduct-group-uuid%7D~1products/get/response\
                  s/200/content/application~1json/schema"
  "/products/{product-uuid}":
    get:
      operationId: getProductByUUID
      tags:
        - Product
      summary: Get Product by product-uuid
      description: Returns the Product
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product
                      product_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Group
                      parent_product_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Parent Product
                      product_default_quantity:
                        type: integer
                        minimum: 0
                        description: Default Quantity of the Product
                      product_default_audience:
                        type: integer
                        minimum: 0
                        description: Default Audience of the Product
                    required:
                      - name
                      - product_group_uuid
                  - properties:
                      product_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product could not be found in the system
    put:
      operationId: createOrUpdateProductByUUID
      tags:
        - Product
      summary: Create Or Update Product
      description: Create Or Update Product
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1products~1%7Bproduct-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - product_group_uuid
      responses:
        "201":
          description: Created if the Product not existing before and created successfully
        "204":
          description: No Content if the Product existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductByUUID
      tags:
        - Product
      summary: Partial Update Product
      description: Partial Update Product
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1products~1%7Bproduct-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product could not be found in the system
    delete:
      operationId: deleteProductByUUID
      tags:
        - Product
      summary: Delete Product by product-uuid
      description: Delete the Product
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Product[...] can not be deactivated. Its still
                  used by Assets[...]"
        "404":
          description: Not Found, if the specified Product could not be found in the system
  /characteristicGroups:
    get:
      operationId: getAllCharacteristicGroup
      tags:
        - Characteristic Group
      summary: Get All Characteristic Group
      description: Returns list of Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `characteristic_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Characteristic Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  characteristic_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1characteristicGroups~1%7Bcharacteristic-group-uuid%7D/get/resp\
                        onses/200/content/application~1json/schema"
                    description: List of the CharacteristicGroup
  "/characteristicGroups/{characteristic-group-uuid}/characteristics":
    get:
      operationId: getCharacteristicByGroup
      tags:
        - Characteristic Group
      summary: Get All Characteristics Under a Characteristic Group
      description: Returns list of Characteristics Under a Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Characteristic under a Characteristic Group
          content:
            application/json:
              schema:
                type: object
                properties:
                  characteristic_list:
                    type: array
                    items:
                      $ref: "#/paths/~1characteristics~1%7Bcharacteristic-uuid%7D/get/responses/200/c\
                        ontent/application~1json/schema"
                    description: List of the Characteristic
  "/characteristicGroups/{characteristic-group-uuid}":
    get:
      operationId: getCharacteristicGroupByUUID
      tags:
        - Characteristic Group
      summary: Get Characteristic Group by characteristic-group-uuid
      description: Returns the Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Characteristic Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Characteristic Group
                  - properties:
                      characteristic_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Characteristic Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Characteristic Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Characteristic Group could not be found
            in the system
    put:
      operationId: createOrUpdateCharacteristicGroupByUUID
      tags:
        - Characteristic Group
      summary: Create Or Update Characteristic Group
      description: Create Or Update Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Characteristic Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1characteristicGroups~1%7Bcharacteristic-group-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Characteristic Group not existing before and created
            successfully
        "204":
          description: No Content if the Characteristic Group existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateCharacteristicGroupByUUID
      tags:
        - Characteristic Group
      summary: Partial Update Characteristic Group
      description: Partial Update Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Characteristic Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1characteristicGroups~1%7Bcharacteristic-group-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Characteristic Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Characteristic Group could not be found
            in the system
    delete:
      operationId: deleteCharacteristicGroupByUUID
      tags:
        - Characteristic Group
      summary: Delete Characteristic Group
      description: Delete Characteristic Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Characteristic Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: CharacteristicGroup[...] cannot be deactivated.
                  It is still in use by Characteristics[...]"
        "404":
          description: Not Found, if the specified Characteristic Group could not be found
            in the system
  /characteristics:
    get:
      operationId: getAllCharacteristics
      tags:
        - Characteristic
      summary: Get All Characteristic
      description: Returns list of Characteristic
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `characteristic_group_uuid`  - It takes String value.
             * `characteristic_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Characteristic
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1characteristicGroups~1%7Bcharacteristic-group-uuid%7D~1charact\
                  eristics/get/responses/200/content/application~1json/schema"
  "/characteristics/{characteristic-uuid}":
    get:
      operationId: getCharacteristicByUUID
      tags:
        - Characteristic
      summary: Get Characteristic by characteristic-uuid
      description: Returns the Characteristic
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Characteristic
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Characteristic
                      characteristic_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Characteristic Group
                  - properties:
                      characteristic_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Characteristic
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Characteristic
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Characteristic could not be found in
            the system
    put:
      operationId: createOrUpdateCharacteristicByUUID
      tags:
        - Characteristic
      summary: Create Or Update Characteristic
      description: Create Or Update Characteristic
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Characteristic
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1characteristics~1%7Bcharacteristic-uuid%7D/get/responses/200/c\
                    ontent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - characteristic_group_uuid
      responses:
        "201":
          description: Created if the Characteristic not existing before and created
            successfully
        "204":
          description: No Content if the Characteristic existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateCharacteristicByUUID
      tags:
        - Characteristic
      summary: Partial Update Characteristic
      description: Partial Update Characteristic
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Characteristic
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1characteristics~1%7Bcharacteristic-uuid%7D/get/responses/200/c\
                    ontent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Characteristic updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: characteristic-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Characteristic could not be found in
            the system
    delete:
      operationId: deleteCharacteristicByUUID
      tags:
        - Characteristic
      summary: Delete Characteristic
      description: Delete Characteristic
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: characteristic-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Characteristic
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Characteristic deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Characteristic[...] cannot be deactivated. It
                  is still in use by Assets[...]"
        "404":
          description: Not Found, if the specified Characteristic could not be found in
            the system
  /loopPolicies:
    get:
      operationId: getAllLoopPolicy
      tags:
        - Loop Policy
      summary: Get All Loop Policy
      description: Returns list of Loop Policy
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `loop_policy_uuid`  - It takes String value.
             * `slot_duration`  - It takes Integer value.
             * `loop_duration`  - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Loop Policy
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  loop_policy_list:
                    type: array
                    items:
                      $ref: "#/paths/~1loopPolicies~1%7Bloop-policy-uuid%7D/get/responses/200/content\
                        /application~1json/schema"
                    description: List of the LoopPolicy
  "/loopPolicies/{loop-policy-uuid}":
    get:
      operationId: getLoopPolicyByUUID
      tags:
        - Loop Policy
      summary: Get Loop Policy by loop-policy-uuid
      description: Returns the Loop Policy
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: loop-policy-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Loop Policy
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Loop Policy
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Loop Policy
                      slot_duration:
                        type: integer
                        format: int32
                        minimum: 1
                        default: 10
                        description: Slot Duration of the Loop Policy
                      loop_duration:
                        type: integer
                        format: int32
                        minimum: 0
                        default: 60
                        description: Loop Duration of the Loop Policy
                    example:
                      name: Loop Policy 1
                      slot_duration: 10
                      loop_duration: 60
                  - properties:
                      loop_policy_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Loop Policy
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Loop Policy
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: loop-policy-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Loop Policy could not be found in the
            system
    put:
      operationId: createOrUpdateLoopPolicyByUUID
      tags:
        - Loop Policy
      summary: Create Or Update Loop Policy
      description: Create Or Update Loop Policy
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: loop-policy-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Loop Policy
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Loop Policy
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1loopPolicies~1%7Bloop-policy-uuid%7D/get/responses/200/content\
                    /application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: Loop Policy-1
              slot_duration: 2
              loop_duration: 60
      responses:
        "201":
          description: Created if the Loop Policy not existing before and created
            successfully
        "204":
          description: No Content if the Loop Policy existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: loop-policy-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateLoopPolicyByUUID
      tags:
        - Loop Policy
      summary: Partial Update Loop Policy
      description: Partial Update Loop Policy
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: loop-policy-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Loop Policy
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Loop Policy
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1loopPolicies~1%7Bloop-policy-uuid%7D/get/responses/200/content\
                    /application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Loop Policy updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: loop-policy-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Loop Policy could not be found in the
            system
    delete:
      operationId: deleteLoopPolicyByUUID
      tags:
        - Loop Policy
      summary: Delete Loop Policy
      description: Delete Loop Policy
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: loop-policy-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Loop Policy
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Loop Policy deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: LoopPolicy[...] cannot be deactivated. It is
                  still in use by Assets[...]"
        "404":
          description: Not Found, if the specified Loop Policy could not be found in the
            system
  /digitalSpecs:
    get:
      operationId: getAllDigitalSpecs
      tags:
        - Digital Spec
      summary: Get All Digital Specs
      description: Returns list of Digital Specs
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `digital_spec_uuid`  - It takes String value.
             * `motion_type`  - It takes String (Enum) value.
             * `width`  - It takes Integer value.
             * `min_width`  - It takes Integer value.
             * `height`  - It takes Integer value.
             * `min_height`  - It takes Integer value.
             * `rotation`  - It takes Integer value.
             * `fps`  - It takes Integer value.
             * `audible`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Digital Specs
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  digital_spec_list:
                    type: array
                    items:
                      $ref: "#/paths/~1digitalSpecs~1%7Bdigital-spec-uuid%7D/get/responses/200/conten\
                        t/application~1json/schema"
  "/digitalSpecs/{digital-spec-uuid}":
    get:
      operationId: getDigitalSpecByUUID
      tags:
        - Digital Spec
      summary: Get DigitalSpec by digital-spec-uuid
      description: Returns the Digital Spec
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: digital-spec-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Digital Spec
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Digital Spec
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Digital Spec
                      motion_type:
                        type: string
                        enum:
                          - MOVING
                          - STILL
                        description: Motion Type of the Digital Spec
                      width:
                        type: integer
                        format: int32
                        minimum: 0
                        description: Width of the Digital Spec in number of pixels.
                      min_width:
                        type: integer
                        format: int32
                        minimum: 0
                        description: Minimum Width of the Digital Spec in number of pixels.
                      height:
                        type: integer
                        format: int32
                        minimum: 0
                        description: Height of the Digital Spec in number of pixels.
                      min_height:
                        type: integer
                        format: int32
                        minimum: 0
                        description: Minimum Height of the Digital Spec in number of pixels.
                      rotation:
                        type: integer
                        format: int32
                        enum:
                          - -90
                          - 0
                          - 90
                          - 180
                        description: Rotation Angle of the Digital Spec
                      fps:
                        type: integer
                        format: int32
                        minimum: 0
                        description: Frame Per Second
                      audible:
                        type: boolean
                        description: Whether the frame has an audio functionality or not
                      characteristics:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Key of the Characteristic
                            value:
                              type: string
                              minLength: 1
                              maxLength: 255
                              description: Value of the Characteristic
                            type:
                              type: string
                              enum:
                                - DEFAULT
                                - DISE
                              description: Type of the Characteristic
                          required:
                            - key
                            - value
                            - type
                        description: List of the Characteristic
                    example:
                      name: Digital Spec 1
                      motion_type: MOVING
                      width: 60
                      min_width: 40
                      height: 100
                      min_height: 80
                      rotation: 90
                      fps: 60
                      audible: true
                  - properties:
                      digital_spec_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Digital Spec
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Digital Spec
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: digital-spec-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Digital Spec could not be found in the
            system
    put:
      operationId: createOrUpdateDigitalSpecByUUID
      tags:
        - Digital Spec
      summary: Create Or Update Digital Spec
      description: Create Or Update Digital Spec
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: digital-spec-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Digital Spec
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Digital Spec
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1digitalSpecs~1%7Bdigital-spec-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - motion_type
                    - width
                    - height
                    - rotation
      responses:
        "201":
          description: Created if the Digital Spec not existing before and created
            successfully
        "204":
          description: No Content if the Digital Spec existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: digital-spec-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateDigitalSpecByUUID
      tags:
        - Digital Spec
      summary: Partial Update Digital Spec
      description: Partial Update Digital Spec
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: digital-spec-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Digital Spec
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Digital Spec
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1digitalSpecs~1%7Bdigital-spec-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Digital Spec updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: digital-spec-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Digital Spec could not be found in the
            system
    delete:
      operationId: deleteDigitalSpecByUUID
      tags:
        - Digital Spec
      summary: Delete Digital Spec
      description: Delete Digital Spec
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: digital-spec-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Digital Spec
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Digital Spec deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: DigitalSpec[...] cannot be deactivated. It is
                  still in use by Assets[...]"
        "404":
          description: Not Found, if the specified Digital Spec could not be found in the
            system
  /trademarks:
    get:
      operationId: getAllTrademark
      tags:
        - Trademark
      summary: Get All Trademark
      description: Returns list of Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `trademark_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Trademark
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  trademark_list:
                    type: array
                    items:
                      $ref: "#/paths/~1trademarks~1%7Btrademark-uuid%7D/get/responses/200/content/app\
                        lication~1json/schema"
                    description: List of the Trademark
  "/trademarks/{trademark-uuid}":
    get:
      operationId: getTrademarkByUUID
      tags:
        - Trademark
      summary: Get Trademark by trademark-uuid
      description: Returns the Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: trademark-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Trademark
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Trademark
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Trademark
                  - properties:
                      trademark_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Trademark
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Trademark
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: trademark-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Trademark could not be found in the
            system
    put:
      operationId: createOrUpdateTrademarkByUUID
      tags:
        - Trademark
      summary: Create Or Update Trademark
      description: Create Or Update Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: trademark-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Trademark
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Trademark
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1trademarks~1%7Btrademark-uuid%7D/get/responses/200/content/app\
                    lication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Trademark not existing before and created successfully
        "204":
          description: No Content if the Trademark existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: trademark-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateTrademarkByUUID
      tags:
        - Trademark
      summary: Partial Update Trademark
      description: Partial Update Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: trademark-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Trademark
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Trademark
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1trademarks~1%7Btrademark-uuid%7D/get/responses/200/content/app\
                    lication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Tag Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: trademark-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Trademark could not be found in the
            system
    delete:
      operationId: deleteTrademarkByUUID
      tags:
        - Trademark
      summary: Delete Trademark
      description: Delete Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: trademark-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Trademark
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Trademark deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Trademark[...] can not be deactivated. It is
                  still used by BusinessActivities[...]"
        "404":
          description: Not Found, if the specified Trademark could not be found in the
            system
  "/trademarks/{trademark-uuid}/businessActivities":
    get:
      operationId: getAllBusinessActivityByTrademark
      tags:
        - Trademark
      summary: Get All Business Activity Under a Trademark
      description: Returns list of Business Activity Under a Trademark
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: trademark-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Trademark
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_activity_uuid`  - It takes String value.
             * `trademark_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Model
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  business_activity_list:
                    type: array
                    items:
                      $ref: "#/paths/~1businessActivities~1%7Bbusiness-activity-uuid%7D/get/responses\
                        /200/content/application~1json/schema"
                    description: List of the BusinessActivity
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: trademark-uuid must be between 1 and 50
  /businessActivities:
    get:
      operationId: getAllBusinessActivity
      tags:
        - Business Activity
      summary: Get All Business Activity
      description: Returns list of Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_activity_uuid`  - It takes String value.
             * `trademark_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Activit
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1trademarks~1%7Btrademark-uuid%7D~1businessActivities/get/respo\
                  nses/200/content/application~1json/schema"
  "/businessActivities/{business-activity-uuid}":
    get:
      operationId: getBusinessActivityByUUID
      tags:
        - Business Activity
      summary: Get Business Activity by business-activity-uuid
      description: Returns the Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-activity-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Activity
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Business Activity
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Business Activity
                      trademark_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Trademark
                    example:
                      trademark_uuid: Trademark1
                      name: Busines Activity 1
                  - properties:
                      business_activity_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Business Activity
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Business Activity
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-activity-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Activity could not be found in
            the system
    put:
      operationId: createOrUpdateBusinessActivityByUUID
      tags:
        - Business Activity
      summary: Create Or Update Business Activity
      description: Create Or Update Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-activity-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Activity
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Activity
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessActivities~1%7Bbusiness-activity-uuid%7D/get/responses\
                    /200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - trademark_uuid
      responses:
        "201":
          description: Created if the Business Activity not existing before and created
            successfully
        "204":
          description: No Content if the Business Activity existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-activity-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateBusinessActivityByUUID
      tags:
        - Business Activity
      summary: Partial Update Business Activity
      description: Partial Update Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-activity-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Activity
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Activity
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessActivities~1%7Bbusiness-activity-uuid%7D/get/responses\
                    /200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Business Activity updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-activity-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Activity could not be found in
            the system
    delete:
      operationId: deleteBusinessActivityByUUID
      tags:
        - Business Activity
      summary: Delete Business Activity
      description: Delete Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-activity-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Activity
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Business Activity deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: BusinessActivity[...] can not be deactivated.
                  It is still used by SiteTypes[...]"
        "404":
          description: Not Found, if the specified Business Activity could not be found in
            the system
  /siteTypes:
    get:
      operationId: getAllSiteType
      tags:
        - Site Type
      summary: Get All Site Type
      description: Returns list of Site Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `site_type_uuid`  - It takes String value.
             * `business_activity_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Site Type
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  site_type_list:
                    type: array
                    items:
                      $ref: "#/paths/~1siteTypes~1%7Bsite-type-uuid%7D/get/responses/200/content/appl\
                        ication~1json/schema"
                    description: List of the SiteType
  "/businessActivities/{business-activity-uuid}/siteTypes":
    get:
      operationId: getAllSiteTypeByBusinessActivity
      tags:
        - Business Activity
      summary: Get All Site Type Under a Business Activity
      description: Returns list of Site Type Under a Business Activity
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-activity-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Activity
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `site_type_uuid`  - It takes String value.
             * `business_activity_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Site Type
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1siteTypes/get/responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business_activity_uuid must be between 1 and 50
  "/siteTypes/{site-type-uuid}":
    get:
      operationId: getSiteTypeByUUID
      tags:
        - Site Type
      summary: Get Site Type by site-type-uuid
      description: Returns the Site Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: site-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Site Type
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Site Type
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Site Type
                      business_activity_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Business Activity
                    example:
                      business_activity_uuid: BusinessActivity1
                      name: Site Type 1
                  - properties:
                      site_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Site Type
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Site Type
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: site-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Site Type could not be found in the
            system
    put:
      operationId: createOrUpdateSiteTypeByUUID
      tags:
        - Site Type
      summary: Create Or Update Site Type
      description: Create Or Update Site Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: site-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Site Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Site Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1siteTypes~1%7Bsite-type-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - business_activity_uuid
      responses:
        "201":
          description: Created if the Site Type not existing before and created successfully
        "204":
          description: No Content if the Site Type existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: site-type-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateSiteTypeByUUID
      tags:
        - Site Type
      summary: Partial Update Site Type
      description: Partial Update Site Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: site-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Site Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Site Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1siteTypes~1%7Bsite-type-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Site Type updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: site-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Site Type could not be found in the
            system
    delete:
      operationId: deleteSiteTypeByUUID
      tags:
        - Site Type
      summary: Delete Site Type
      description: Delete Site Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: site-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Site Type
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Site Type deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: SiteType[...] can not be deactivated. It is
                  still used by Assets[...]"
        "404":
          description: Not Found, if the specified Site Type could not be found in the
            system
  /families:
    get:
      operationId: getAllFamily
      tags:
        - Family
      summary: Get All Family
      description: Returns list of Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `family_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Family
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  family_list:
                    type: array
                    items:
                      $ref: "#/paths/~1families~1%7Bfamily-uuid%7D/get/responses/200/content/applicat\
                        ion~1json/schema"
                    description: List of the Family
  "/families/{family-uuid}":
    get:
      operationId: getFamilyByUUID
      tags:
        - Family
      summary: Get Family by family-uuid
      description: Returns the Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Family
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Family
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Family
                  - properties:
                      family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Family
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Family
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Family could not be found in the system
    put:
      operationId: createOrUpdateFamilyByUUID
      tags:
        - Family
      summary: Create Or Update Family
      description: Create Or Update Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1families~1%7Bfamily-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Family not existing before and created successfully
        "204":
          description: No Content if the Family existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: family-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateFamilyByUUID
      tags:
        - Family
      summary: Partial Update Family
      description: Partial Update Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1families~1%7Bfamily-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Family updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Family could not be found in the system
    delete:
      operationId: deleteFamilyByUUID
      tags:
        - Family
      summary: Delete Family
      description: Delete Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Family
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Family deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Family[...] can not be deactivated. It is still
                  used by SubFamilies[...]"
        "404":
          description: Not Found, if the specified Family could not be found in the system
  "/families/{family-uuid}/subFamilies":
    get:
      operationId: getAllSubFamilyBySubFamilies
      tags:
        - Family
      summary: Get All Sub Family Under a Families
      description: Returns list of Sub Family Under a Families
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Family
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `sub_family_uuid`  - It takes String value.
             * `family_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Sub Family
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub_family_list:
                    type: array
                    items:
                      $ref: "#/paths/~1subFamilies~1%7Bsub-family-uuid%7D/get/responses/200/content/a\
                        pplication~1json/schema"
                    description: List of the SubFamily
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: family-uuid must be between 1 and 50
  /subFamilies:
    get:
      operationId: getAllSubFamily
      tags:
        - SubFamily
      summary: Get All Sub Family
      description: Returns list of Sub Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `sub_family_uuid`  - It takes String value.
             * `family_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Sub Family
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1families~1%7Bfamily-uuid%7D~1subFamilies/get/responses/200/con\
                  tent/application~1json/schema"
  "/subFamilies/{sub-family-uuid}/models":
    get:
      operationId: getAllModelBySubFamily
      tags:
        - SubFamily
      summary: Get All Model Under a Sub Family
      description: Returns list of Model Under a Sub Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sub-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sub Family
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `model_uuid`  - It takes String value.
             * `sub_family_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Model
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  model_list:
                    type: array
                    items:
                      $ref: "#/paths/~1models~1%7Bmodel-uuid%7D/get/responses/200/content/application\
                        ~1json/schema"
                    description: List of the Model
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sub-family-uuid must be between 1 and 50
  "/subFamilies/{sub-family-uuid}":
    get:
      operationId: getSubFamilyByUUID
      tags:
        - SubFamily
      summary: Get SubFamily by sub-family-uuid
      description: Returns the Sub-Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sub-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sub-Family
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Sub-Family
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Sub-Family
                      family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Family
                  - properties:
                      sub_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Sub-Family
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Sub-Family
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sub_family_uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Sub-Family could not be found in the
            system
    put:
      operationId: createOrUpdateSubFamilyByUUID
      tags:
        - SubFamily
      summary: Create Or Update Sub-Family
      description: Create Or Update Sub-Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sub-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sub-Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Sub-Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1subFamilies~1%7Bsub-family-uuid%7D/get/responses/200/content/a\
                    pplication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - family_uuid
      responses:
        "201":
          description: Created if the Sub-Family not existing before and created
            successfully
        "204":
          description: No Content if the Sub-Family existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sub_family_uuid must be between 1 and 50
    patch:
      operationId: partialUpdateSubFamilyByUUID
      tags:
        - SubFamily
      summary: Partial Update Sub-Family
      description: Partial Update Sub-Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sub-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sub-Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Sub-Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1subFamilies~1%7Bsub-family-uuid%7D/get/responses/200/content/a\
                    pplication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Sub-Family updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sub_family_uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Sub-Family could not be found in the
            system
    delete:
      operationId: deleteSubFamilyByUUID
      tags:
        - Sub Family
      summary: Delete Sub Family
      description: Delete Sub Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sub-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sub Family
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Sub Family deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: SubFamily[...] can not be deactivated. It is
                  still used by Models[...]"
        "404":
          description: Not Found, if the specified Sub Family could not be found in the
            system
  /models:
    get:
      operationId: getAllModel
      tags:
        - Model
      summary: Get All Model
      description: Returns list of Model
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `model_uuid`  - It takes String value.
             * `sub_family_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Model
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1subFamilies~1%7Bsub-family-uuid%7D~1models/get/responses/200/c\
                  ontent/application~1json/schema"
  "/models/{model-uuid}":
    get:
      operationId: getModelByUUID
      tags:
        - Model
      summary: Get Model by model-uuid
      description: Returns the Model
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: model-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Model
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Model
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Model
                      sub_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Sub-Family
                  - properties:
                      model_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Model
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Model
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: model-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Model could not be found in the system
    put:
      operationId: createOrUpdateModelByUUID
      tags:
        - Model
      summary: Create Or Update Model
      description: Create Or Update Model
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: model-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Model
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Model
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1models~1%7Bmodel-uuid%7D/get/responses/200/content/application\
                    ~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - sub_family_uuid
      responses:
        "201":
          description: Created if the Model not existing before and created successfully
        "204":
          description: No Content if the Model existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: model-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateModelByUUID
      tags:
        - Model
      summary: Partial Update Model
      description: Partial Update Model
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: model-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Model
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Model
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1models~1%7Bmodel-uuid%7D/get/responses/200/content/application\
                    ~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Model updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: model-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Model could not be found in the system
    delete:
      operationId: deleteModelByUUID
      tags:
        - Model
      summary: Delete Model
      description: Delete Model
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: model-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Model
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Model deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Model[...] cannot be deactivated. It is still
                  in use by Assets[...]"
        "404":
          description: Not Found, if the specified Model could not be found in the system
  /frameOrientations:
    get:
      operationId: getAllFrameOrientation
      tags:
        - Frame Orientation
      summary: Get All Frame Orientation
      description: Returns list of Frame Orientation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `frame_orientation_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Frame Orientation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  frame_orientation_list:
                    type: array
                    items:
                      $ref: "#/paths/~1frameOrientations~1%7Bframe-orientation-uuid%7D/get/responses/\
                        200/content/application~1json/schema"
                    description: List of the FrameOrientation
  "/frameOrientations/{frame-orientation-uuid}":
    get:
      operationId: getFrameOrientationByUUID
      tags:
        - Frame Orientation
      summary: Get Frame Orientation by frame-orientation-uuid
      description: Returns the Frame Orientation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-orientation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Orientation
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Frame Orientation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Frame Orientation
                  - properties:
                      frame_orientation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Orientation
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Frame Orientation
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-orientation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Orientation could not be found in
            the system
    put:
      operationId: createOrUpdateFrameOrientationByUUID
      tags:
        - Frame Orientation
      summary: Create Or Update Frame Orientation
      description: Create Or Update Frame Orientation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-orientation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Orientation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Orientation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameOrientations~1%7Bframe-orientation-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Frame Orientation not existing before and created
            successfully
        "204":
          description: No Content if the Frame Orientation existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-orientation-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateFrameOrientationByUUID
      tags:
        - Frame Orientation
      summary: Partial Update Frame Orientation
      description: Partial Update Frame Orientation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-orientation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Orientation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Orientation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameOrientations~1%7Bframe-orientation-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Frame Orientation updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-orientation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Orientation could not be found in
            the system
    delete:
      operationId: deleteFrameOrientationByUUID
      tags:
        - Frame Orientation
      summary: Delete Frame Orientation
      description: Delete Frame Orientation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-orientation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the FrameOrientation
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the FrameOrientation deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: FrameOrientation[...] can not be deactivated.
                  It is still used by Assets:[...]"
        "404":
          description: Not Found, if the specified FrameOrientation could not be found in
            the system
  /frameSizeFamilies:
    get:
      operationId: getAllFrameSizeFamily
      tags:
        - Frame Size Family
      summary: Get All Frame Size Family
      description: Returns list of Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `frame_size_family_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Activit
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  frame_size_family_list:
                    type: array
                    items:
                      $ref: "#/paths/~1frameSizeFamilies~1%7Bframe-size-family-uuid%7D/get/responses/\
                        200/content/application~1json/schema"
                    description: List of the FrameSizeFamily
  "/frameSizeFamilies/{frame-size-family-uuid}/frameSizes":
    get:
      operationId: getAllFrameSizeByFrameSizeFamily
      tags:
        - Frame Size Family
      summary: Get All Frame Size Under a Frame Size Family
      description: Returns list of Frame Size Under a Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size Family
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `frame_size_uuid`  - It takes String value.
             * `frame_size_family_uuid` - It takes String value.
             * `width`  - It takes Integer value.
             * `height`  - It takes Integer value.
             * `real_surface`  - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Frame Size
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  frame_size_list:
                    type: array
                    items:
                      $ref: "#/paths/~1frameSizes~1%7Bframe-size-uuid%7D/get/responses/200/content/ap\
                        plication~1json/schema"
                    description: List of the FrameSize
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-family-uuid must be between 1 and 50
  "/frameSizeFamilies/{frame-size-family-uuid}":
    get:
      operationId: getFrameSizeFamilyByUUID
      tags:
        - Frame Size Family
      summary: Get Frame Size Family by frame-size-family-uuid
      description: Returns the Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size Family
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Frame Size Family
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Frame Size Family
                  - properties:
                      frame_size_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Size Family
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Frame Size Family
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Size Family could not be found in
            the system
    put:
      operationId: createOrUpdateFrameSizeFamilyByUUID
      tags:
        - Frame Size Family
      summary: Create Or Update Frame Size Family
      description: Create Or Update Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Size Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameSizeFamilies~1%7Bframe-size-family-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Frame Size Family not existing before and created
            successfully
        "204":
          description: No Content if the Frame Size Family existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-family-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateFrameSizeFamilyByUUID
      tags:
        - Frame Size Family
      summary: Partial Update Frame Size Family
      description: Partial Update Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Size Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameSizeFamilies~1%7Bframe-size-family-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Frame Size Family updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Size Family could not be found in
            the system
    delete:
      operationId: deleteFrameSizeFamilyByUUID
      tags:
        - Frame Size Family
      summary: Delete Frame Size Family
      description: Delete Frame Size Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size Family
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Frame Size Family deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: FrameSizeFamily[...] can not be deactivated. It
                  is still used by FrameSizes:[...]"
        "404":
          description: Not Found, if the specified Frame Size Family could not be found in
            the system
  /frameSizes:
    get:
      operationId: getAllFrameSize
      tags:
        - Frame Size
      summary: Get All Frame Size
      description: Returns list of Frame Size
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `frame_size_uuid`  - It takes String value.
             * `frame_size_family_uuid` - It takes String value.
             * `width`  - It takes Integer value.
             * `height`  - It takes Integer value.
             * `real_surface`  - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Frame Size
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1frameSizeFamilies~1%7Bframe-size-family-uuid%7D~1frameSizes/ge\
                  t/responses/200/content/application~1json/schema"
  "/frameSizes/{frame-size-uuid}":
    get:
      operationId: getFrameSizeByUUID
      tags:
        - Frame Size
      summary: Get Frame Size by frame-size-uuid
      description: Returns the Frame Size
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Frame Size
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Frame Size
                      frame_size_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Size Family
                      width:
                        type: number
                        format: double
                        minimum: 0
                        description: Width of the Frame Size
                      height:
                        type: number
                        format: double
                        minimum: 0
                        description: Height of the Frame Size
                      real_surface:
                        type: number
                        format: double
                        minimum: 0
                        description: Real Surfacce of the Frame Size
                    example:
                      name: Frame Size
                      frame_size_family_uuid: Frame-Size-Family-1
                      width: 60.75
                      height: 100.33
                      real_surface: 3000.34
                  - properties:
                      frame_size_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Size
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Frame Size
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Size could not be found in the
            system
    put:
      operationId: createOrUpdateFrameSizeByUUID
      tags:
        - Frame Size
      summary: Create Or Update Frame Size
      description: Create Or Update Frame Size
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Size
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameSizes~1%7Bframe-size-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - frame_size_family_uuid
      responses:
        "201":
          description: Created if the Frame Size not existing before and created
            successfully
        "204":
          description: No Content if the Frame Size existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateFrameSizeByUUID
      tags:
        - Frame Size
      summary: Partial Update Frame Size
      description: Partial Update Frame Size
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Frame Size
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1frameSizes~1%7Bframe-size-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Frame Size updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: frame-size-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Frame Size could not be found in the
            system
    delete:
      operationId: deleteFrameSizeByUUID
      tags:
        - Frame Size
      summary: Delete Frame Size
      description: Delete Frame Size
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: frame-size-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Frame Size
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Frame Size deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: FrameSize[...] can not be deactivated. It is
                  still used by Assets:[...]"
        "404":
          description: Not Found, if the specified Frame Size could not be found in the
            system
  /countries:
    get:
      operationId: getAllCountry
      tags:
        - Country
      summary: Get All Country
      description: Returns list of Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `country_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Country
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  contry_list:
                    type: array
                    items:
                      $ref: "#/paths/~1countries~1%7Bcountry-uuid%7D/get/responses/200/content/applic\
                        ation~1json/schema"
                    description: List of the Country
  "/countries/{country-uuid}":
    get:
      operationId: getCountryByUUID
      tags:
        - Country
      summary: Get Country by country-uuid
      description: Returns the Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: country-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Country
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Country
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Country
                  - properties:
                      country_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Country
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Country
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: country-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Country could not be found in the system
    put:
      operationId: createOrUpdateCountryByUUID
      tags:
        - Country
      summary: Create Or Update Country
      description: Create Or Update Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: country-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Country
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Country
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1countries~1%7Bcountry-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: String
      responses:
        "201":
          description: Created if the Country not existing before and created successfully
        "204":
          description: No Content if the Country existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: country-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateCountryByUUID
      tags:
        - Country
      summary: Partial Update Country
      description: Partial Update Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: country-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Country
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Country
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1countries~1%7Bcountry-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Country updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: country-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Country could not be found in the system
    delete:
      operationId: deleteCountryByUUID
      tags:
        - Country
      summary: Delete Country
      description: Delete Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: country-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Country
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Country deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Country[...] cannot be deactivated. It is still
                  in use by Counties:[...]"
        "404":
          description: Not Found, if the specified Country could not be found in the system
  "/countries/{country-uuid}/counties":
    get:
      operationId: getAllCountiesByCountries
      tags:
        - Country
      summary: Get All Audience County Under a Country
      description: Returns list of County Under a Country
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: country-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the country
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `county_uuid`  - It takes String value
             * `country_uuid` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of county
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  county_list:
                    type: array
                    items:
                      $ref: "#/paths/~1counties~1%7Bcounty-uuid%7D/get/responses/200/content/applicat\
                        ion~1json/schema"
                    description: List of the County
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: country-uuid must be between 1 and 50
  /counties:
    get:
      operationId: getAllCounty
      tags:
        - County
      summary: Get All County
      description: Returns list of County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `county_uuid`  - It takes String value.
             * `country_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of County
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1countries~1%7Bcountry-uuid%7D~1counties/get/responses/200/cont\
                  ent/application~1json/schema"
  "/counties/{county-uuid}":
    get:
      operationId: getCountyByUUID
      tags:
        - County
      summary: Get County by county-uuid
      description: Returns the County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: county-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the County
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested County
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the County
                      country_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Country
                  - properties:
                      county_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the County
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of County
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: county-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified County could not be found in the system
    put:
      operationId: createOrUpdateCountyByUUID
      tags:
        - County
      summary: Create Or Update County
      description: Create Or Update County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: county-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the County
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: County
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1counties~1%7Bcounty-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - country_uuid
      responses:
        "201":
          description: Created if the County not existing before and created successfully
        "204":
          description: No Content if the County existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: county-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateCountyByUUID
      tags:
        - County
      summary: Partial Update County
      description: Partial Update County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: county-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the County
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: County
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1counties~1%7Bcounty-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the County updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: county-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified County could not be found in the system
    delete:
      operationId: deleteCountyByUUID
      tags:
        - County
      summary: Delete County
      description: Delete County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: county-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the County
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the County deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: County[...] cannot be deactivated. It is still
                  in use by Towns [...]"
        "404":
          description: Not Found, if the specified County could not be found in the system
  "/counties/{county-uuid}/towns":
    get:
      operationId: getAllTownByCounty
      tags:
        - County
      summary: Get All Town Under a County
      description: Returns list of Town Under a County
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: county-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the County
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `district_uuid`  - It takes String value
             * `town_uuid` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Town
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  town_list:
                    type: array
                    items:
                      $ref: "#/paths/~1towns~1%7Btown-uuid%7D/get/responses/200/content/application~1\
                        json/schema"
                    description: List of the Town
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: county-uuid must be between 1 and 50
  /towns:
    get:
      operationId: getAllTown
      tags:
        - Town
      summary: Get All Town
      description: Returns list of Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `district_uuid`  - It takes String value.
             * `town_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Town
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1counties~1%7Bcounty-uuid%7D~1towns/get/responses/200/content/a\
                  pplication~1json/schema"
  "/towns/{town-uuid}":
    get:
      operationId: getTownByUUID
      tags:
        - Town
      summary: Get Town by town-uuid
      description: Returns the Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Town
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Town
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Town
                      county_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the County
                  - properties:
                      town_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Town
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Town
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: town-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Town could not be found in the system
    put:
      operationId: createOrUpdateTownByUUID
      tags:
        - Town
      summary: Create Or Update Town
      description: Create Or Update Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Town
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Town
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1towns~1%7Btown-uuid%7D/get/responses/200/content/application~1\
                    json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - county_uuid
      responses:
        "201":
          description: Created if the Town not existing before and created successfully
        "204":
          description: No Content if the Town existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: town-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateTownByUUID
      tags:
        - Town
      summary: Partial Update Town
      description: Partial Update Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Town
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Town
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1towns~1%7Btown-uuid%7D/get/responses/200/content/application~1\
                    json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Town updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: town-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Town could not be found in the system
    delete:
      operationId: deleteTownByUUID
      tags:
        - Town
      summary: Delete Town
      description: Delete Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Town
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Town deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Towns[...] cannot be deactivated. It is still
                  in use by District :[...]"
        "404":
          description: Not Found, if the specified Town could not be found in the system
  "/towns/{town-uuid}/districts":
    get:
      operationId: getAllDistrictByTown
      tags:
        - Town
      summary: Get All District Under a Town
      description: Returns list of District Under a Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Town
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `district_uuid`  - It takes String value
             * `town_uuid` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of District
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  district_list:
                    type: array
                    items:
                      $ref: "#/paths/~1districts~1%7Bdistrict-uuid%7D/get/responses/200/content/appli\
                        cation~1json/schema"
                    description: List of the District
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: town-uuid must be between 1 and 50
  /districts:
    get:
      operationId: getAllDistrict
      tags:
        - District
      summary: Get All District
      description: Returns list of District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `district_uuid`  - It takes String value.
             * `town_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of District
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1towns~1%7Btown-uuid%7D~1districts/get/responses/200/content/ap\
                  plication~1json/schema"
  "/districts/{district-uuid}":
    get:
      operationId: getDistrictByUUID
      tags:
        - District
      summary: Get District by district-uuid
      description: Returns the District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the District
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested District
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the District
                      town_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Town
                  - properties:
                      district_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the District
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of District
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: district-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified District could not be found in the system
    put:
      operationId: createOrUpdateDistrictByUUID
      tags:
        - District
      summary: Create Or Update District
      description: Create Or Update District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the District
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: District
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1districts~1%7Bdistrict-uuid%7D/get/responses/200/content/appli\
                    cation~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - town_uuid
      responses:
        "201":
          description: Created if the District not existing before and created successfully
        "204":
          description: No Content if the District existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: district-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateDistrictByUUID
      tags:
        - District
      summary: Partial Update District
      description: Partial Update District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the District
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: District
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1districts~1%7Bdistrict-uuid%7D/get/responses/200/content/appli\
                    cation~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the District updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: district-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified District could not be found in the system
    delete:
      operationId: deleteDistrictByUUID
      tags:
        - District
      summary: Delete District
      description: Delete District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the District
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the District deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Districts[...] cannot be deactivated. It is
                  still in use by Assets :[...]"
        "404":
          description: Not Found, if the specified District could not be found in the system
  /postalAreas:
    get:
      operationId: getAllPostalArea
      tags:
        - Postal Area
      summary: Get All Postal Area
      description: Returns list of Postal Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `postal_area_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Postal Area
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  postal_area_list:
                    type: array
                    items:
                      $ref: "#/paths/~1postalAreas~1%7Bpostal-area-uuid%7D/get/responses/200/content/\
                        application~1json/schema"
                    description: List of the PostalArea
  "/postalAreas/{postal-area-uuid}":
    get:
      operationId: getPostalAreaByUUID
      tags:
        - Postal Area
      summary: Get Postal Area by postal-area-uuid
      description: Returns the Postal Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Area
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Postal Area
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Postal Area
                  - properties:
                      postal_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal Area
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Postal Area
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal Area could not be found in the
            system
    put:
      operationId: createOrUpdatePostalAreaByUUID
      tags:
        - Postal Area
      summary: Create Or Update Postal Area
      description: Create Or Update Postal Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalAreas~1%7Bpostal-area-uuid%7D/get/responses/200/content/\
                    application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Postal Area not existing before and created
            successfully
        "204":
          description: No Content if the Postal Area existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-area-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePostalAreaByUUID
      tags:
        - Postal Area
      summary: Partial Update Postal Area
      description: Partial Update Postal Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalAreas~1%7Bpostal-area-uuid%7D/get/responses/200/content/\
                    application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Postal Area updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal Area could not be found in the
            system
    delete:
      operationId: deletePostalAreaByUUID
      tags:
        - Postal Area
      summary: Delete Postal Area
      description: Delete Postal Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PostalArea
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PostalArea deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PostalArea[...] cannot be deactivated. It is
                  still in use by PostalDistricts:[...]"
        "404":
          description: Not Found, if the specified PostalArea could not be found in the
            system
  "/postalAreas/{postal-area-uuid}/postalDistricts":
    get:
      operationId: getAllPostalDistrictByArea
      tags:
        - Postal Area
      summary: Get All Postal District Under a Area
      description: Returns list of Postal District Under a Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Area
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `postal_district_uuid`  - It takes String value
             * `postal_area_uuid` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Postal District
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  postal_district_list:
                    type: array
                    items:
                      $ref: "#/paths/~1postalDistricts~1%7Bpostal-district-uuid%7D/get/responses/200/\
                        content/application~1json/schema"
                    description: List of the PostalDistrict
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-area-uuid must be between 1 and 50
  /postalDistricts:
    get:
      operationId: getAllPostalDistrict
      tags:
        - Postal District
      summary: Get All Postal District
      description: Returns list of Postal District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `postal_district_uuid`  - It takes String value.
             * `postal_area_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Postal District
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1postalAreas~1%7Bpostal-area-uuid%7D~1postalDistricts/get/respo\
                  nses/200/content/application~1json/schema"
  "/postalDistricts/{postal-district-uuid}":
    get:
      operationId: getPostalDistrictByUUID
      tags:
        - Postal District
      summary: Get Postal District by postal-district-uuid
      description: Returns the Postal District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal District
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Postal District
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      postal_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal Area
                  - properties:
                      postal_district_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal District
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Postal District
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-district-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal District could not be found in
            the system
    put:
      operationId: createOrUpdatePostalDistrictByUUID
      tags:
        - Postal District
      summary: Create Or Update Postal District
      description: Create Or Update Postal District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal District
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal District
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalDistricts~1%7Bpostal-district-uuid%7D/get/responses/200/\
                    content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - postal_area_uuid
      responses:
        "201":
          description: Created if the Postal District not existing before and created
            successfully
        "204":
          description: No Content if the Postal District existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-district-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePostalDistrictByUUID
      tags:
        - Postal District
      summary: Partial Update Postal District
      description: Partial Update Postal District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal District
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal District
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalDistricts~1%7Bpostal-district-uuid%7D/get/responses/200/\
                    content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Postal District updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-district-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal District could not be found in
            the system
    delete:
      operationId: deletePostalDistrictByUUID
      tags:
        - Postal District
      summary: Delete Postal District
      description: Delete Postal District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal District
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Postal District deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PostalDistrict[...] cannot be deactivated. It
                  is still in use by PostalSector:[...]"
        "404":
          description: Not Found, if the specified Postal District could not be found in
            the system
  "/postalDistricts/{postal-district-uuid}/postalSectors":
    get:
      operationId: getAllPostalSectorsByDistrict
      tags:
        - Postal District
      summary: Get All Postal Sector Under a District
      description: Returns list of Postal Sector Under a District
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-district-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal District
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `postal_sector_uuid`  - It takes String value
             * `postal_district_uuid` - It takes String value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of postal Sector
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  postal_sector_list:
                    type: array
                    items:
                      $ref: "#/paths/~1postalSectors~1%7Bpostal-sector-uuid%7D/get/responses/200/cont\
                        ent/application~1json/schema"
                    description: List of the PostalSector
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-district-uuid must be between 1 and 50
  /postalSectors:
    get:
      operationId: getAllPostalSector
      tags:
        - Postal Sector
      summary: Get All Postal Sector
      description: Returns list of Postal Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `postal_sector_uuid`  - It takes String value.
             * `postal_district_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Postal Sector
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1postalDistricts~1%7Bpostal-district-uuid%7D~1postalSectors/get\
                  /responses/200/content/application~1json/schema"
  "/postalSectors/{postal-sector-uuid}":
    get:
      operationId: getPostalSectorByUUID
      tags:
        - Postal Sector
      summary: Get Postal Sector by postal-sector-uuid
      description: Returns the Postal Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-sector-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Sector
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Postal Sector
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      postal_district_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal District
                  - properties:
                      postal_sector_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal Sector
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Postal Sector
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-sector-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal Sector could not be found in the
            system
    put:
      operationId: createOrUpdatePostalSectorByUUID
      tags:
        - Postal Sector
      summary: Create Or Update Postal Sector
      description: Create Or Update Postal Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-sector-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Sector
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal Sector
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalSectors~1%7Bpostal-sector-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - postal_district_uuid
      responses:
        "201":
          description: Created if the Postal Sector not existing before and created
            successfully
        "204":
          description: No Content if the Postal Sector existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-sector-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePostalSectorByUUID
      tags:
        - Postal Sector
      summary: Partial Update Postal Sector
      description: Partial Update Postal Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-sector-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Sector
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Postal Sector
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postalSectors~1%7Bpostal-sector-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Postal Sector updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-sector-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Postal Sector could not be found in the
            system
    delete:
      operationId: deletePostalSectorByUUID
      tags:
        - Postal Sector
      summary: Delete Postal Sector
      description: Delete Postal Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-sector-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postal Sector
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Postal Sector deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PostalSector[...] cannot be deactivated. It is
                  still in use by Postcodes [...]"
        "404":
          description: Not Found, if the specified Postal Sector could not be found in the
            system
  "/postalSectors/{postal-sector-uuid}/postcodes":
    get:
      operationId: getAllPostCodeBySector
      tags:
        - Postal Sector
      summary: Get All Post Code Under a Sector
      description: Returns list of Post Code Under a Sector
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postal-sector-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Audience Category Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value
             * `post_code_uuid`  - It takes String value
             * `postal_sector_uuid` - It takes String value
             * `longitude`  - It takes Double value
             * `latitude`  - It takes Double value
             * `update_stamp`  - It takes Integer value <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Postcode
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_code_list:
                    type: array
                    items:
                      $ref: "#/paths/~1postcodes~1%7Bpostcode-uuid%7D/get/responses/200/content/appli\
                        cation~1json/schema"
                    description: List of the Postcode
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postal-sector-uuid must be between 1 and 50
  /postcodes:
    get:
      operationId: getAllPostcode
      tags:
        - Post Code
      summary: Get All Post Code
      description: Returns list of Post Code
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `post_code_uuid`  - It takes String value
             * `postal_sector_uuid` - It takes String value
             * `longitude`  - It takes Double value
             * `latitude`  - It takes Double value
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Post Code
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1postalSectors~1%7Bpostal-sector-uuid%7D~1postcodes/get/respons\
                  es/200/content/application~1json/schema"
  "/postcodes/{postcode-uuid}":
    get:
      operationId: getPostCodeByUUID
      tags:
        - Post Code
      summary: Get Post Code by postcode-uuid
      description: Returns the Post Code
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postcode-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Post Code
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Post Code
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      postal_sector_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postal Sector
                      longitude:
                        type: number
                        format: double
                        minimum: -180
                        maximum: 180
                      latitude:
                        type: number
                        format: double
                        minimum: -90
                        maximum: 90
                  - properties:
                      post_code_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Post Code
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Post Code
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postcode-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Post Code could not be found in the
            system
    put:
      operationId: createOrUpdatePostCodeByUUID
      tags:
        - Post Code
      summary: Create Or Update Post Code
      description: Create Or Update Post Code
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postcode-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Post Code
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Post Code
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postcodes~1%7Bpostcode-uuid%7D/get/responses/200/content/appli\
                    cation~1json/schema/allOf/0"
                - type: object
                  required:
                    - longitude
                    - latitude
      responses:
        "201":
          description: Created if the Post Code not existing before and created successfully
        "204":
          description: No Content if the Post Code existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postcode-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePostCodeByUUID
      tags:
        - Post Code
      summary: Partial Update Post Code
      description: Partial Update Post Code
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postcode-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Post Code
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Post Code
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1postcodes~1%7Bpostcode-uuid%7D/get/responses/200/content/appli\
                    cation~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Post Code updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: postcode-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Post Code could not be found in the
            system
    delete:
      operationId: deletePostcodeByUUID
      tags:
        - Postcode
      summary: Delete Postcode
      description: Delete Postcode
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: postcode-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Postcode
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Postcode deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Postcode[...] cannot be deactivated. It is
                  still in use by Assets:[...]"
        "404":
          description: Not Found, if the specified Postcode could not be found in the system
  /tvAreas:
    get:
      operationId: getAllTvArea
      tags:
        - Tv Area
      summary: Get All Tv Area
      description: Returns list of Tv Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `description` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Tv Area
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  tv_area_list:
                    type: array
                    items:
                      $ref: "#/paths/~1tvAreas~1%7Btv-area-uuid%7D/get/responses/200/content/applicat\
                        ion~1json/schema"
                    description: List of the TvArea
  "/tvAreas/{tv-area-uuid}":
    get:
      operationId: getTvAreaByUUID
      tags:
        - Tv Area
      summary: Get Tv Area by tv-area-uuid
      description: Returns the Tv Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tv-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tv Area
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Tv Area
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Tv Area
                  - properties:
                      tv_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Tv Area
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Tv Area
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tv-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tv Area could not be found in the system
    put:
      operationId: createOrUpdateTvAreaByUUID
      tags:
        - Tv Area
      summary: Create Or Update Tv Area
      description: Create Or Update Tv Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tv-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tv Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tv Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tvAreas~1%7Btv-area-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: String
      responses:
        "201":
          description: Created if the Tv Area not existing before and created successfully
        "204":
          description: No Content if the Tv Area existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tv-area-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateTvAreaByUUID
      tags:
        - Tv Area
      summary: Partial Update Tv Area
      description: Partial Update Tv Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tv-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tv Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Tv Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1tvAreas~1%7Btv-area-uuid%7D/get/responses/200/content/applicat\
                    ion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Tv Area updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: tv-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Tv Area could not be found in the system
    delete:
      operationId: deleteTvAreaByUUID
      tags:
        - Tv Area
      summary: Delete Tv Area
      description: Delete Tv Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: tv-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Tv Area
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Tv Area deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: TvArea[...] cannot be deactivated. It is still
                  in use by Assets [...]"
        "404":
          description: Not Found, if the specified TvArea could not be found in the system
  /conurbations:
    get:
      operationId: getAllConurbation
      tags:
        - Conurbation
      summary: Get All Conurbation
      description: Returns list of Conurbation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `conurbation_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Conurbation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  conurbation_list:
                    type: array
                    items:
                      $ref: "#/paths/~1conurbations~1%7Bconurbation-uuid%7D/get/responses/200/content\
                        /application~1json/schema"
                    description: List of the Conurbation
  "/conurbations/{conurbation-uuid}":
    get:
      operationId: getConurbationByUUID
      tags:
        - Conurbation
      summary: Get Conurbation by conurbation-uuid
      description: Returns the Conurbation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: conurbation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Conurbation
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Conurbation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Conurbation
                  - properties:
                      conurbation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Conurbation
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Conurbation
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: conurbation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Conurbation could not be found in the
            system
    put:
      operationId: createOrUpdateConurbationByUUID
      tags:
        - Conurbation
      summary: Create Or Update Conurbation
      description: Create Or Update Conurbation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: conurbation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Conurbation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Conurbation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1conurbations~1%7Bconurbation-uuid%7D/get/responses/200/content\
                    /application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: String
      responses:
        "201":
          description: Created if the Conurbation not existing before and created
            successfully
        "204":
          description: No Content if the Conurbation existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: conurbation-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateConurbationByUUID
      tags:
        - Conurbation
      summary: Partial Update Conurbation
      description: Partial Update Conurbation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: conurbation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Conurbation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Conurbation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1conurbations~1%7Bconurbation-uuid%7D/get/responses/200/content\
                    /application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Conurbation updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: conurbation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Conurbation could not be found in the
            system
    delete:
      operationId: deleteConurbationByUUID
      tags:
        - Conurbation
      summary: Delete Conurbation
      description: Delete Conurbation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: conurbation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Conurbation
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Conurbation deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Conurbation[...] cannot be deactivated. It is
                  still in use by Assets [...]"
        "404":
          description: Not Found, if the specified Conurbation could not be found in the
            system
  /routeTowns:
    get:
      operationId: getAllRouteTown
      tags:
        - Route Town
      summary: Get All Route Town
      description: Returns list of Route Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `route_town_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Route Town
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_town_list:
                    type: array
                    items:
                      $ref: "#/paths/~1routeTowns~1%7Broute-town-uuid%7D/get/responses/200/content/ap\
                        plication~1json/schema"
                    description: List of the RouteTown
  "/routeTowns/{route-town-uuid}":
    get:
      operationId: getRouteTownByUUID
      tags:
        - Route Town
      summary: Get Route Town by route-town-uuid
      description: Returns the Route Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: route-town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Route Town
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Route Town
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Route Town
                  - properties:
                      route_town_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Route Town
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Route Town
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: route-town-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Route Town could not be found in the
            system
    put:
      operationId: createOrUpdateRouteTownByUUID
      tags:
        - Route Town
      summary: Create Or Update Route Town
      description: Create Or Update Route Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: route-town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Route Town
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Route Town
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1routeTowns~1%7Broute-town-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: String
      responses:
        "201":
          description: Created if the Route Town not existing before and created
            successfully
        "204":
          description: No Content if the Route Town existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: route-town-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateRouteTownByUUID
      tags:
        - Route Town
      summary: Partial Update Route Town
      description: Partial Update Route Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: route-town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Route Town
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Route Town
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1routeTowns~1%7Broute-town-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Route Town updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: route-town-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Route Town could not be found in the
            system
    delete:
      operationId: deleteRouteTownByUUID
      tags:
        - Route Town
      summary: Delete Route Town
      description: Delete Route Town
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: route-town-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Route Town
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Route Town deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: RouteTown[...] cannot be deactivated. It is
                  still in use by Assets:[...]"
        "404":
          description: Not Found, if the specified RouteTown could not be found in the
            system
  /geographicalAreaLevels:
    get:
      operationId: getAllGeographicalAreaLevel
      tags:
        - Geographical Area Level
      summary: Get All Geographical Area Level
      description: Returns list of Geographical Area Level
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `geographical_area_level_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Geographical Area Level
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  geographical_area_level_list:
                    type: array
                    items:
                      $ref: "#/paths/~1geographicalAreaLevels~1%7Bgeographical-area-level-uuid%7D/get\
                        /responses/200/content/application~1json/schema"
                    description: List of the GeographicalAreaLevel
  "/geographicalAreaLevels/{geographical-area-level-uuid}":
    get:
      operationId: getGeographicalAreaLevelByUUID
      tags:
        - Geographical Area Level
      summary: Get Geographical Area Level by geographical-area-level-uuid
      description: Returns the Geographical Area Level
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-level-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Level
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Geographical Area Level
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Geographical Area Level
                  - properties:
                      geographical-area-level-uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Level
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Geographical Area Level
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-level-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area Level could not be
            found in the system
    put:
      operationId: createOrUpdateGeographicalAreaLevelByUUID
      tags:
        - Geographical Area Level
      summary: Create Or Update Geographical Area Level
      description: Create Or Update Geographical Area Level
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-level-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Level
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area Level
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreaLevels~1%7Bgeographical-area-level-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Geographical Area Level not existing before and
            created successfully
        "204":
          description: No Content if the Geographical Area Level existing before and
            updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-level-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateGeographicalAreaLevelByUUID
      tags:
        - Geographical Area Level
      summary: Partial Update Geographical Area Level
      description: Partial Update Geographical Area Level
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-level-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Level
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area Level
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreaLevels~1%7Bgeographical-area-level-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Geographical Area Level updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-level-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area Level could not be
            found in the system
    delete:
      operationId: deleteGeographicalAreaLevelByUUID
      tags:
        - Geographical Area Level
      summary: Delete Geographical Area Level
      description: Delete Geographical Area Level
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-level-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Level
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Geographical Area Level deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: GeographicalAreaLevels[...] cannot be
                  deactivated. It is still in use by GeographicalAreas :[...]"
        "404":
          description: Not Found, if the specified Geographical Area Level could not be
            found in the system
  /geographicalAreaGroups:
    get:
      operationId: getAllGeographicalAreaGroup
      tags:
        - Geographical Area Group
      summary: Get All Geographical Area Group
      description: Returns list of Geographical Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `geographical_area_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Geographical Area Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  geographical_area_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1geographicalAreaGroups~1%7Bgeographical-area-group-uuid%7D/get\
                        /responses/200/content/application~1json/schema"
                    description: List of the GeographicalAreaGroup
  "/geographicalAreaGroups/{geographical-area-group-uuid}":
    get:
      operationId: getGeographicalAreaGroupByUUID
      tags:
        - Geographical Area Group
      summary: Get Geographical Area Group by geographical-area-group-uuid
      description: Returns the Geographical Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Geographical Area Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Geographical Area Group
                  - properties:
                      geographical_area_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Geographical Area Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area Group could not be
            found in the system
    put:
      operationId: createOrUpdateGeographicalAreaGroupByUUID
      tags:
        - Geographical Area Group
      summary: Create Or Update Geographical Area Group
      description: Create Or Update Geographical Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreaGroups~1%7Bgeographical-area-group-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Geographical Area Group not existing before and
            created successfully
        "204":
          description: No Content if the Geographical Area Group existing before and
            updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateGeographicalAreaGroupByUUID
      tags:
        - Geographical Area Group
      summary: Partial Update Geographical Area Group
      description: Partial Update Geographical Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreaGroups~1%7Bgeographical-area-group-uuid%7D/get\
                    /responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Geographical Area Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area Group could not be
            found in the system
    delete:
      operationId: deleteGeographicalAreaGroupByUUID
      tags:
        - Geographical Area Group
      summary: Delete Geographical Area Group
      description: Delete Geographical Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Geographical Area Group deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: GeographicalAreaGroups[...] cannot be
                  deactivated. It is still in use by GeographicalAreas :[...]"
        "404":
          description: Not Found, if the specified Geographical Area Group could not be
            found in the system
  /geographicalAreas:
    get:
      operationId: getAllGeographicalArea
      tags:
        - Geographical Area
      summary: Get All Geographical Area
      description: Returns list of Geographical Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            nullable: true
          required: false
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `geographical_area_uuid`  - It takes String value.
             * `geographical_area_group_uuid`  - It takes String value.
             * `geographical_area_level1_uuid`  - It takes String value.
             * `geographical_area_level2_uuid`  - It takes String value.
             * `geographical_area_level3_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Geographical Area
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  geographical_area_list:
                    type: array
                    items:
                      $ref: "#/paths/~1geographicalAreas~1%7Bgeographical-area-uuid%7D/get/responses/\
                        200/content/application~1json/schema"
                    description: List of the GeographicalArea
  "/geographicalAreas/{geographical-area-uuid}":
    get:
      operationId: getGeographicalAreaByUUID
      tags:
        - Geographical Area
      summary: Get Geographical Area by geographical-area-uuid
      description: Returns the Geographical Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Geographical Area
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Geographical Area
                      geographical_area_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Group
                      geographical_area_level1_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Level
                      geographical_area_level2_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Level
                      geographical_area_level3_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area Level
                  - properties:
                      geographical_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Geographical Area
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area could not be found in
            the system
    put:
      operationId: createOrUpdateGeographicalAreaByUUID
      tags:
        - Geographical Area
      summary: Create Or Update Geographical Area
      description: Create Or Update Geographical Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreas~1%7Bgeographical-area-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - geographical_area_level1_uuid
      responses:
        "201":
          description: Created if the Geographical Area not existing before and created
            successfully
        "204":
          description: No Content if the Geographical Area existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateGeographicalAreaByUUID
      tags:
        - Geographical Area
      summary: Partial Update Geographical Area
      description: Partial Update Geographical Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Geographical Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1geographicalAreas~1%7Bgeographical-area-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Geographical Area updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: geographical-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Geographical Area could not be found in
            the system
    delete:
      operationId: deleteGeographicalAreaByUUID
      tags:
        - Geographical Area
      summary: Delete Geographical Area
      description: Delete Geographical Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: geographical-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Geographical Area
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Geographical Area deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: GeographicalAreas[...] cannot be deactivated.
                  It is still in use by Assets :[...]"
        "404":
          description: Not Found, if the specified Geographical Area could not be found in
            the system
  /assignedTos:
    get:
      operationId: getAllAssignedTos
      tags:
        - Assigned To
      summary: Get All Assigned To
      description: Returns list of Assigned To
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `assigned_to_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Assigned To
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  assigned_to_list:
                    type: array
                    items:
                      $ref: "#/paths/~1assignedTos~1%7Bassigned-to-uuid%7D/get/responses/200/content/\
                        application~1json/schema"
                    description: List of the Assigned To
  "/assignedTos/{assigned-to-uuid}":
    get:
      operationId: getAssignedToByUUID
      tags:
        - Assigned To
      summary: Get Assigned To by assigned-to-uuid
      description: Returns the Assigned To
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: assigned-to-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Assigned To
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Assigned To
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the AssignedTo
                  - properties:
                      assigned_to_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the AssignedTo
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of AssignedTo
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: assigned-to-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Assigned To could not be found in the
            system
    put:
      operationId: createOrUpdateAssignedToByUUID
      tags:
        - Assigned To
      summary: Create Or Update Assigned To
      description: Create Or Update Assigned To
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: assigned-to-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Assigned To
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Assigned To
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1assignedTos~1%7Bassigned-to-uuid%7D/get/responses/200/content/\
                    application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Assigned To not existing before and created
            successfully
        "204":
          description: No Content if the Assigned To existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: assigned-to-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateAssignedToByUUID
      tags:
        - Assigned To
      summary: Partial Update Assigned To
      description: Partial Update Assigned To
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: assigned-to-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Assigned To
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Assigned To
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1assignedTos~1%7Bassigned-to-uuid%7D/get/responses/200/content/\
                    application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Assigned To updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: assigned-to-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Assigned To could not be found in the
            system
    delete:
      operationId: deleteAssignedToByUUID
      tags:
        - Assigned To
      summary: Delete Assigned To by assigned-to-uuid
      description: Sets the Assigned To to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: assigned-to-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Assigned To
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Assigned To deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: assigned-to-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Assigned To could not be found in the
            system
  /salesTeams:
    get:
      operationId: getAllSalesTeams
      tags:
        - Sales Team
      summary: Get All Sales Team
      description: Returns list of Sales Team
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `sales_team_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Sales Team
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  sales_team_list:
                    type: array
                    items:
                      $ref: "#/paths/~1salesTeams~1%7Bsales-team-uuid%7D/get/responses/200/content/ap\
                        plication~1json/schema"
                    description: List of the Sales Team
  "/salesTeams/{sales-team-uuid}":
    get:
      operationId: getSalesTeamByUUID
      tags:
        - Sales Team
      summary: Get Sales Team by sales-team-uuid
      description: Returns the Sales Team
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sales-team-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sales Team
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Sales Team
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Sales Team
                  - properties:
                      sales_team_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Sales Team
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Sales Team
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sales-team-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Sales Team could not be found in the
            system
    put:
      operationId: createOrUpdateSalesTeamByUUID
      tags:
        - Sales Team
      summary: Create Or Update Sales Team
      description: Create Or Update Sales Team
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sales-team-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sales Team
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Sales Team
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1salesTeams~1%7Bsales-team-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Sales Team not existing before and created
            successfully
        "204":
          description: No Content if the Sales Team existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sales-team-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateSalesTeamByUUID
      tags:
        - Sales Team
      summary: Partial Update Sales Team
      description: Partial Update Sales Team
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sales-team-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sales Team
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Sales Team
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1salesTeams~1%7Bsales-team-uuid%7D/get/responses/200/content/ap\
                    plication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Sales Team updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sales-team-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Sales Team could not be found in the
            system
    delete:
      operationId: deleteSalesTeamByUUID
      tags:
        - Sales Team
      summary: Delete Sales Team by sales-team-uuid
      description: Sets the Sales Team to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: sales-team-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Sales Team
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Sales Team deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: sales-team-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Sales Team could not be found in the
            system
  /persons:
    get:
      operationId: getAllPersons
      tags:
        - Person
      summary: Get All Person
      description: Returns list of Person
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `email`  - It takes String value.
             * `person_uuid`  - It takes String value.
             * `person_Type`  - It takes Enum value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Persons
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  person_list:
                    type: array
                    items:
                      $ref: "#/paths/~1persons~1%7Bperson-uuid%7D/get/responses/200/content/applicati\
                        on~1json/schema"
                    description: List of the Person
  "/persons/{person-uuid}":
    get:
      operationId: getPersonByUUID
      tags:
        - Person
      summary: Get Person by person-uuid
      description: Returns the Person
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: person-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Person
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Person
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Person
                      email:
                        type: string
                        format: email
                        minLength: 1
                        maxLength: 255
                        description: E-mail of the Person
                      person_type:
                        type: string
                        enum:
                          - SALES
                          - ADMIN
                        description: Type of the Person
                  - properties:
                      person_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Person
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Person
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: person-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Person could not be found in the system
    put:
      operationId: createOrUpdatePersonByUUID
      tags:
        - Person
      summary: Create Or Update Person
      description: Create Or Update Person
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: person-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Person
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Person
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1persons~1%7Bperson-uuid%7D/get/responses/200/content/applicati\
                    on~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - person_type
      responses:
        "201":
          description: Created if the Person not existing before and created successfully
        "204":
          description: No Content if the Person existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: person-uuid must be between 1 and 100
    patch:
      operationId: partialUpdatePersonByUUID
      tags:
        - Person
      summary: Partial Update Person
      description: Partial Update Person
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: person-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Person
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Person
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1persons~1%7Bperson-uuid%7D/get/responses/200/content/applicati\
                    on~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Person updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: person-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Person could not be found in the system
    delete:
      operationId: deletePersonByUUID
      tags:
        - Person
      summary: Delete Person by person-uuid
      description: Sets the Person to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: person-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Person
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Person deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: person-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Person could not be found in the system
  /organisationGroups:
    get:
      operationId: getAllOrganisationGroups
      tags:
        - Organisation Group
      summary: Get All Organisation Groups
      description: Returns list of Organisation Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  organisation_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1organisationGroups~1%7Borganisation-group-uuid%7D/get/response\
                        s/200/content/application~1json/schema"
                    description: List of the Organisation Group
  "/organisationGroups/{organisation-group-uuid}":
    get:
      operationId: getOrganisationGroupByUUID
      tags:
        - Organisation Group
      summary: Get Organisation Group by organisation-group-uuid
      description: Returns the Organisation Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Organisation Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Organisation Group
                      organisation_uuids:
                        type: array
                        items:
                          type: string
                        description: Set of Organisation Market Universal IDs which belongs to this
                          Organisation Group
                  - properties:
                      organisation_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Organisation Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Organisation Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Group could not be found
            in the system
    put:
      operationId: createOrUpdateOrganisationGroupByUUID
      tags:
        - Organisation Group
      summary: Create Or Update Organisation Group
      description: Create Or Update Organisation Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisationGroups~1%7Borganisation-group-uuid%7D/get/response\
                    s/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Organisation Group not existing before and created
            successfully
        "204":
          description: No Content if the Organisation Group existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateOrganisationGroupByUUID
      tags:
        - Organisation Group
      summary: Partial Update Organisation Group
      description: Partial Update Organisation Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisationGroups~1%7Borganisation-group-uuid%7D/get/response\
                    s/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Organisation Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Group could not be found
            in the system
    delete:
      operationId: deleteOrganisationGroupByUUID
      tags:
        - Organisation Group
      summary: Delete Organisation Group by organisation-group-uuid
      description: Sets the Organisation Group to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Organisation Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Group could not be found
            in the system
  /organisations:
    get:
      operationId: getAllOrganisations
      tags:
        - Organisation
      summary: Get All Organisation
      description: Returns list of Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_uuid`  - It takes String value.
             * `organisation_type`  - It takes Enum value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  organisation_list:
                    type: array
                    items:
                      $ref: "#/paths/~1organisations~1%7Borganisation-uuid%7D/get/responses/200/conte\
                        nt/application~1json/schema"
                    description: List of the Organisation
  "/organisations/{organisation-uuid}":
    get:
      operationId: getOrganisationByUUID
      tags:
        - Organisation
      summary: Get Organisation by organisation-uuid
      description: Returns the Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Organisation
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 255
                        description: Name of the Organisation
                      organisation_type:
                        type: string
                        enum:
                          - ADVERTISER
                          - SPECIALIST
                          - AGENCY
                          - BARTER
                          - DSP
                        description: Type of the Organisation
                      brand_uuids:
                        type: array
                        items:
                          type: string
                        description: Set of Brand Market Universal IDs which belongs to this
                          Organisation
                  - properties:
                      organisation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Organisation
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Organisation
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation could not be found in the
            system
    put:
      operationId: createOrUpdateOrganisationByUUID
      tags:
        - Organisation
      summary: Create Or Update Organisation
      description: Create Or Update Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisations~1%7Borganisation-uuid%7D/get/responses/200/conte\
                    nt/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - organisation_type
      responses:
        "201":
          description: Created if the Organisation not existing before and created
            successfully
        "204":
          description: No Content if the Organisation existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateOrganisationByUUID
      tags:
        - Organisation
      summary: Partial Update Organisation
      description: Partial Update Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisations~1%7Borganisation-uuid%7D/get/responses/200/conte\
                    nt/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Organisation updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation could not be found in the
            system
    delete:
      operationId: deleteOrganisationByUUID
      tags:
        - Organisation
      summary: Delete Organisation
      description: Delete Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Organisation deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Organisation[...] cannot be deactivated. It is
                  still in use by OrganisationGroups:[...]"
        "404":
          description: Not Found, if the specified Organisation could not be found in the
            system
  "/organisationGroups/{organisation-group-uuid}/organisations":
    get:
      operationId: getAllOrganisationsByGroup
      tags:
        - Organisation
      summary: Get All Organisation
      description: Returns list of Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_uuid`  - It takes String value.
             * `organisation_type`  - It takes Enum value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1organisations/get/responses/200/content/application~1json/sche\
                  ma"
  /organisationContacts:
    get:
      operationId: getAllOrganisationContacts
      tags:
        - Organisation Contact
      summary: Get All Organisation Contact
      description: Returns list of Organisation Contact
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_contact_uuid`  - It takes String value.
             * `email`  - It takes String value.
             * `organisation_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation Contact
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  organisation_contact_list:
                    type: array
                    items:
                      $ref: "#/paths/~1organisationContacts~1%7Borganisation-contact-uuid%7D/get/resp\
                        onses/200/content/application~1json/schema"
                    description: List of the Organisation Contact
  "/organisations/{organisation-uuid}/organisationContacts":
    get:
      operationId: getAllOrganisationContactsByOrganisation
      tags:
        - Organisation Contact
      summary: Get All Organisation Contact for given Organisation
      description: Returns list of Organisation Contact for given Organisation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_contact_uuid`  - It takes String value.
             * `email`  - It takes String value.
             * `organisation_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation Contactfor given Organisation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1organisationContacts/get/responses/200/content/application~1js\
                  on/schema"
  "/organisationContacts/{organisation-contact-uuid}":
    get:
      operationId: getOrganisationContactByUUID
      tags:
        - Organisation Contact
      summary: Get Organisation Contact by organisation-contact-uuid
      description: Returns the Organisation Contact
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-contact-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Contact
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Organisation Contact
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 120
                        description: Name of the Organisation Contact
                      email:
                        type: string
                        format: email
                        minLength: 1
                        maxLength: 255
                        description: E-mail of the Organisation Contact
                      organisation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Organisation
                  - properties:
                      organisation_contact_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Organisation Contact
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Organisation Contact
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-contact-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Contact could not be found
            in the system
    put:
      operationId: createOrUpdateOrganisationContactByUUID
      tags:
        - Organisation Contact
      summary: Create Or Update Organisation Contact
      description: Create Or Update Organisation Contact
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-contact-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Contact
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation Contact
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisationContacts~1%7Borganisation-contact-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - organisation_uuid
      responses:
        "201":
          description: Created if the Organisation Contact not existing before and created
            successfully
        "204":
          description: No Content if the Organisation Contact existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-contact-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateOrganisationContactByUUID
      tags:
        - Organisation Contact
      summary: Partial Update Organisation Contact
      description: Partial Update Organisation Contact
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-contact-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Contact
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Organisation Contact
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1organisationContacts~1%7Borganisation-contact-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Organisation Contact updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-contact-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Contact could not be found
            in the system
    delete:
      operationId: deleteOrganisationContactByUUID
      tags:
        - Organisation Contact
      summary: Delete Organisation Contact
      description: Delete Organisation Contact
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: organisation-contact-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Organisation Contact
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Organisation Contact deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: organisation-contact-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Organisation Contact could not be found
            in the system
  /productCategoryFamilies:
    get:
      operationId: getAllProductCategoryFamilies
      tags:
        - Product Category Family
      summary: Get All Product Category Family
      description: Returns list of Product Category Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_family_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category Family
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_category_family_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productCategoryFamilies~1%7Bproduct-category-family-uuid%7D/ge\
                        t/responses/200/content/application~1json/schema"
                    description: List of the Product Category Family
  "/productCategoryFamilies/{product-category-family-uuid}":
    get:
      operationId: getProductCategoryFamilyByUUID
      tags:
        - Product Category Family
      summary: Get Produuct Category Family by product-category-family-uuid
      description: Returns the Product Category Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Family
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Category Family
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Category Family
                  - properties:
                      product_category_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Family
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Category Family
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Family could not be
            found in the system
    put:
      operationId: createOrUpdateProductCategoryFamilyByUUID
      tags:
        - Product Category Family
      summary: Create Or Update Product Category Family
      description: Create Or Update Product Category Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryFamilies~1%7Bproduct-category-family-uuid%7D/ge\
                    t/responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Product Category Family not existing before and
            created successfully
        "204":
          description: No Content if the Product Category Family existing before and
            created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-family-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductCategoryFamilyByUUID
      tags:
        - Product Category Family
      summary: Partial Update Product Category Family
      description: Partial Update Product Category Family
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Family
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Family
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryFamilies~1%7Bproduct-category-family-uuid%7D/ge\
                    t/responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Category Family updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-family-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Family could not be
            found in the system
    delete:
      operationId: deleteProductCategoryFamilyByUUID
      tags:
        - Product Category Family
      summary: Delete Product Category Family by product-category-family-uuid
      description: Sets the Product Category Family to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Family
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Category Family deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductCategoryFamily[XXX] can not be
                  deactivated. Its still used by ProductCategoryClasses [List
                  product category class Codes]"
        "404":
          description: Not Found, if the specified Product Category Family could not be
            found in the system
  /productCategoryClasses:
    get:
      operationId: getAllProductCategoryClasses
      tags:
        - Product Category Class
      summary: Get All Product Category Class
      description: Returns list of Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_class_uuid`  - It takes String value.
             * `product_category_family_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category Class
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_category_class_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productCategoryClasses~1%7Bproduct-category-class-uuid%7D/get/\
                        responses/200/content/application~1json/schema"
                    description: List of the Product Category Class
  "/productCategoryFamilies/{product-category-family-uuid}/productCategoryClasses":
    get:
      operationId: getAllProductCategoryClassesByFamily
      tags:
        - Product Category Class
      summary: Get All Product Category Class
      description: Returns list of Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-family-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Family
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_class_uuid`  - It takes String value.
             * `product_category_family_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category Class
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1productCategoryClasses/get/responses/200/content/application~1\
                  json/schema"
  "/productCategoryClasses/{product-category-class-uuid}":
    get:
      operationId: getProductCategoryClassByUUID
      tags:
        - Product Category Class
      summary: Get Produuct Category Class by product-category-class-uuid
      description: Returns the Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-class-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Class
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Category Class
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Category Class
                      product_category_family_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Family
                  - properties:
                      product_category_class_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Class
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Category Class
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-class-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Class could not be
            found in the system
    put:
      operationId: createOrUpdateProductCategoryClassByUUID
      tags:
        - Product Category Class
      summary: Create Or Update Product Category Class
      description: Create Or Update Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-class-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Class
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Class
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryClasses~1%7Bproduct-category-class-uuid%7D/get/\
                    responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - product_category_family_uuid
      responses:
        "201":
          description: Created if the Product Category Class not existing before and
            created successfully
        "204":
          description: No Content if the Product Category Class existing before and
            created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-class-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductCategoryClassByUUID
      tags:
        - Product Category Class
      summary: Partial Update Product Category Class
      description: Partial Update Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-class-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Class
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Class
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryClasses~1%7Bproduct-category-class-uuid%7D/get/\
                    responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Category Class updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-class-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Class could not be
            found in the system
    delete:
      operationId: deleteProductCategoryClassByUUID
      tags:
        - Product Category Class
      summary: Delete Product Category Class by product-category-class-uuid
      description: Sets the Product Category Class to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-class-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Class
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Category Class deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                example: null
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductCategoryClass[XXX] can not be
                  deactivated. Its still used by ProductCategoryGroups [List
                  product category group Codes]"
        "404":
          description: Not Found, if the specified Product Category Class could not be
            found in the system
  /productCategoryGroups:
    get:
      operationId: getAllProductCategoryGroups
      tags:
        - Product Category Group
      summary: Get All Product Category Group
      description: Returns list of Product Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_group_uuid`  - It takes String value.
             * `product_category_class_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_category_grooup_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productCategoryGroups~1%7Bproduct-category-group-uuid%7D/get/r\
                        esponses/200/content/application~1json/schema"
                    description: List of the Product Category Group
  "/productCategoryClass/{product-category-class-uuid}/productCategoryGroups":
    get:
      operationId: getAllProductCategoryGroupsByProductCategoryClass
      tags:
        - Product Category Group
      summary: Get All Product Category Group for given Product Category Class
      description: Returns list of Product Category Group for given Product Category Class
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-class-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Class
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_group_uuid`  - It takes String value.
             * `product_category_class_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category Group for given Product
            Category Class
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1productCategoryGroups/get/responses/200/content/application~1j\
                  son/schema"
  "/productCategoryGroups/{product-category-group-uuid}":
    get:
      operationId: getProductCategoryGroupByUUID
      tags:
        - Product Category Group
      summary: Get Produuct Category Group by product-category-group-uuid
      description: Returns the Product Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Category Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Category Group
                      product_category_class_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Class
                  - properties:
                      product_category_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Category Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Group could not be
            found in the system
    put:
      operationId: createOrUpdateProductCategoryGroupByUUID
      tags:
        - Product Category Group
      summary: Create Or Update Product Category Group
      description: Create Or Update Product Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryGroups~1%7Bproduct-category-group-uuid%7D/get/r\
                    esponses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - product_category_class_uuid
      responses:
        "201":
          description: Created if the Product Category Group not existing before and
            created successfully
        "204":
          description: No Content if the Product Category Group existing before and
            created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductCategoryGroupByUUID
      tags:
        - Product Category Group
      summary: Partial Update Product Category Group
      description: Partial Update Product Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategoryGroups~1%7Bproduct-category-group-uuid%7D/get/r\
                    esponses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Category Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category Group could not be
            found in the system
    delete:
      operationId: deleteProductCategoryGroupByUUID
      tags:
        - Product Category Group
      summary: Delete Product Category Group by product-category-group-uuid
      description: Sets the Product Category Group to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Category Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductCategoryGroup[XXX] can not be
                  deactivated. Its still used by ProductCategories [List product
                  category Codes]"
        "404":
          description: Not Found, if the specified Product Category Group could not be
            found in the system
  /productCategories:
    get:
      operationId: getAllProductCategories
      tags:
        - Product Category
      summary: Get All Product Category
      description: Returns list of Product Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_uuid`  - It takes String value.
             * `product_category_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_category_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productCategories~1%7Bproduct-category-uuid%7D/get/responses/2\
                        00/content/application~1json/schema"
                    description: List of the Product Category
  "/productCategoryGroups/{product-category-group-uuid}/productCategories":
    get:
      operationId: getAllProductCategoriesByProductCategoryGroup
      tags:
        - Product Category
      summary: Get All Product Category for given Product Category Group
      description: Returns list of Product Category for given Product Category Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_category_uuid`  - It takes String value.
             * `product_category_group_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Category for given Product
            Category Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1productCategories/get/responses/200/content/application~1json/\
                  schema"
  "/productCategories/{product-category-uuid}":
    get:
      operationId: getProductCategoryByUUID
      tags:
        - Product Category
      summary: Get Produuct Category by product-category-uuid
      description: Returns the Product Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Category
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Category
                      product_category_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category Group
                  - properties:
                      product_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Category Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category could not be found in
            the system
    put:
      operationId: createOrUpdateProductCategoryByUUID
      tags:
        - Product Category
      summary: Create Or Update Product Category
      description: Create Or Update Product Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategories~1%7Bproduct-category-uuid%7D/get/responses/2\
                    00/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - product_category_group_uuid
      responses:
        "201":
          description: Created if the Product Category not existing before and created
            successfully
        "204":
          description: No Content if the Product Category existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductCategoryByUUID
      tags:
        - Product Category
      summary: Partial Update Product Category
      description: Partial Update Product Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productCategories~1%7Bproduct-category-uuid%7D/get/responses/2\
                    00/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Category updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category could not be found in
            the system
    delete:
      operationId: deleteProductCategoryByUUID
      tags:
        - Product Category
      summary: Delete Product Category by product-category-uuid
      description: Sets the Product Category to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Category
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Category deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: product-category-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Category could not be found in
            the system
  /brands:
    get:
      operationId: getAllBrands
      tags:
        - Brand
      summary: Get All Brand
      description: Returns list of Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `brand_uuid`  - It takes String value.
             * `product_category_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Brand
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  brand_list:
                    type: array
                    items:
                      $ref: "#/paths/~1brands~1%7Bbrand-uuid%7D/get/responses/200/content/application\
                        ~1json/schema"
                    description: List of the Brand
  "/brands/{brand-uuid}/organisations":
    get:
      operationId: getAllOrganisationsByBrand
      tags:
        - Organisation
      summary: Get All Organisation for givn Brand
      description: Returns list of Organisation for given Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Brand
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `organisation_uuid`  - It takes String value.
             * `organisation_type`  - It takes Enum value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Organisation
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1organisations/get/responses/200/content/application~1json/sche\
                  ma"
  "/brands/{brand-uuid}":
    get:
      operationId: getBrandByUUID
      tags:
        - Brand
      summary: Get Brand by brand-uuid
      description: Returns the Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Brand
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Brand
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 255
                        description: Name of the Brand
                      product_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Category
                  - properties:
                      brand_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Brand
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Brand
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: brand-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Brand could not be found in the system
    put:
      operationId: createOrUpdateBrandByUUID
      tags:
        - Brand
      summary: Create Or Update Brand
      description: Create Or Update Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Brand
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Brand
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1brands~1%7Bbrand-uuid%7D/get/responses/200/content/application\
                    ~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - product_category_uuid
      responses:
        "201":
          description: Created if the Brand not existing before and created successfully
        "204":
          description: No Content if the Brand existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: brand-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateBrandByUUID
      tags:
        - Brand
      summary: Partial Update Brand
      description: Partial Update Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Brand
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Brand
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1brands~1%7Bbrand-uuid%7D/get/responses/200/content/application\
                    ~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Organisation updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: brand-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Brand could not be found in the system
    delete:
      operationId: deleteBrandByUUID
      tags:
        - Brand
      summary: Delete Brand by Brand-uuid
      description: Sets the Brand to be inactive
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Brand
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Brand deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: Brand-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Brand could not be found in the system
  /invoicingTypes:
    get:
      operationId: getAllInvoicingType
      tags:
        - Invoicing Type
      summary: Get All Invoicing Type
      description: Returns list of Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Invoicing Type
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoicing_type_list:
                    type: array
                    items:
                      $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D/get/responses/200/co\
                        ntent/application~1json/schema"
                    description: List of the InvoicingType
  "/invoicingTypes/{invoicing-type-uuid}":
    get:
      operationId: getInvoicingTypeByUUID
      tags:
        - Invoicing Type
      summary: Get Invoicing Type by invoicing-type-uuid
      description: Returns the Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: invoicing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Invoicing Type
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Invoicing Type
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the InvoicingType
                  - properties:
                      invoicing_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the InvoicingType
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of InvoicingType
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: invoicing-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Invoicing Type could not be found in
            the system
    put:
      operationId: createOrUpdateInvoicingTypeByUUID
      tags:
        - Invoicing Type
      summary: Create Or Update Invoicing Type
      description: Create Or Update Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: invoicing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Invoicing Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Invoicing Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Invoicing Type not existing before and created
            successfully
        "204":
          description: No Content if the Invoicing Type existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: invoicing-type-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateInvoicingTypeByUUID
      tags:
        - Invoicing Type
      summary: Partial Update Invoicing Type
      description: Partial Update Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: invoicing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Invoicing Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Invoicing Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Invoicing Type updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: invoicing-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Invoicing Type could not be found in
            the system
    delete:
      operationId: deleteInvoicingTypeByUUID
      tags:
        - Invoicing Type
      summary: Delete Invoicing Type
      description: Delete Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: invoicing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Invoicing Type
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Invoicing Type updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: InvoicingType[...] cannot be deactivated. It is
                  still in use by ProductFormats[...]"
        "404":
          description: Not Found, if the specified Invoicing Type could not be found in
            the system
  "/invoicingTypes/{invoicing-type-uuid}/productFormats":
    get:
      operationId: getAllProductFormatsByInvoicingType
      tags:
        - Invoicing Type
      summary: Get All Product Format of a Invoicing Type
      description: Returns list of Product Format of a Invoicing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: invoicing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Invoicing Type
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_format_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productFormats~1%7Bproduct-format-uuid%7D/get/responses/200/co\
                        ntent/application~1json/schema"
                    description: List of the Product Format
        "400":
          description: Bad Request, if the request not proper
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: invoicing-type-uuid must be between 1 and 50
  /pricingTypes:
    get:
      operationId: getAllPricingType
      tags:
        - Pricing Type
      summary: Get All Pricing Type
      description: Returns list of Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Pricing Type
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  pricing_type_list:
                    type: array
                    items:
                      $ref: "#/paths/~1pricingTypes~1%7Bpricing-type-uuid%7D/get/responses/200/conten\
                        t/application~1json/schema"
                    description: List of the PricingType
  "/pricingTypes/{pricing-type-uuid}":
    get:
      operationId: getPricingTypeByUUID
      tags:
        - Pricing Type
      summary: Get Pricing Type by pricing-type-uuid
      description: Returns the Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: pricing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Pricing Type
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Pricing Type
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the PricingType
                  - properties:
                      pricing_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the PricingType
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of PricingType
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: pricing-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Pricing Type could not be found in the
            system
    put:
      operationId: createOrUpdatePricingTypeByUUID
      tags:
        - Pricing Type
      summary: Create Or Update Pricing Type
      description: Create Or Update Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: pricing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Pricing Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Pricing Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1pricingTypes~1%7Bpricing-type-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Pricing Type not existing before and created
            successfully
        "204":
          description: No Content if the Pricing Type existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: pricing-type-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePricingTypeByUUID
      tags:
        - Pricing Type
      summary: Partial Update Pricing Type
      description: Partial Update Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: pricing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Pricing Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Pricing Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1pricingTypes~1%7Bpricing-type-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Pricing Type updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: pricing-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Pricing Type could not be found in the
            system
    delete:
      operationId: deletePricingTypeByUUID
      tags:
        - Pricing Type
      summary: Delete Pricing Type
      description: Delete Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: pricing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Pricing Type
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Pricing Type deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PricingType[...] cannot be deactivated. It is
                  still in use by ProductFormats:[...]"
        "404":
          description: Not Found, if the specified PricingType could not be found in the
            system
  "/pricingTypes/{pricing-type-uuid}/productFormats":
    get:
      operationId: getAllProductFormatsByPricingType
      tags:
        - Pricing Type
      summary: Get All Product Format of a Pricing Type
      description: Returns list of Product Format of a Pricing Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: pricing-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Pricing Type
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          content:
            application/json:
              schema:
                $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D~1productFormats/get/\
                  responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: pricing-type-uuid must be between 1 and 50
  /productFormatMarketings:
    get:
      operationId: getAllProductFormatMarketing
      tags:
        - ProductFormat Marketing
      summary: Get All Product Format Marketing
      description: Returns list of Product Format Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format Marketing
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_format_marketing_list:
                    type: array
                    items:
                      $ref: "#/paths/~1productFormatMarketings~1%7Bproduct-format-marketing-uuid%7D/g\
                        et/responses/200/content/application~1json/schema"
                    description: List of the ProductFormatMarketing
  "/productFormatMarketings/{product-format-marketing-uuid}":
    get:
      operationId: getProductFormatMarketingByUUID
      tags:
        - ProductFormat Marketing
      summary: Get ProductFormat Marketing by product-format-marketing-uuid
      description: Returns the ProductFormat Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-marketing-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the ProductFormat Marketing
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested ProductFormat Marketing
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the ProductFormatMarketing
                  - properties:
                      product_format_marketing_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the ProductFormatMarketing
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of ProductFormatMarketing
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-marketing-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified ProductFormat Marketing could not be
            found in the system
    put:
      operationId: createOrUpdateProductFormatMarketingByUUID
      tags:
        - ProductFormat Marketing
      summary: Create Or Update ProductFormat Marketing
      description: Create Or Update ProductFormat Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-marketing-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the ProductFormat Marketing
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: ProductFormat Marketing
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productFormatMarketings~1%7Bproduct-format-marketing-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the ProductFormat Marketing not existing before and
            created successfully
        "204":
          description: No Content if the ProductFormat Marketing existing before and
            updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-marketing-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductFormatMarketingByUUID
      tags:
        - ProductFormat Marketing
      summary: Partial Update ProductFormat Marketing
      description: Partial Update ProductFormat Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-marketing-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the ProductFormat Marketing
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: ProductFormat Marketing
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productFormatMarketings~1%7Bproduct-format-marketing-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the ProductFormat Marketing updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-marketing-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified ProductFormat Marketing could not be
            found in the system
    delete:
      operationId: deleteProductFormatMarketingByUUID
      tags:
        - ProductFormat Marketing
      summary: Delete ProductFormat Marketing
      description: Delete ProductFormat Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-marketing-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the ProductFormat Marketing
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the ProductFormat Marketing updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductFormatMarketings[...] cannot be
                  deactivated. It is still in use by ProductFormats:[...]"
        "404":
          description: Not Found, if the specified ProductFormat Marketing could not be
            found in the system
  "/productFormatMarketings/{product-format-marketing-uuid}/productFormats":
    get:
      operationId: getAllProductFormatsByProductFormatMarketing
      tags:
        - ProductFormat Marketing
      summary: Get All Product Format of a Product Format Marketing
      description: Returns list of Product Format of a Product Format Marketing
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-marketing-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Format Marketing
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          content:
            application/json:
              schema:
                $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D~1productFormats/get/\
                  responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-marketing-uuid must be between 1 and 50
  /businessDivisions:
    get:
      operationId: getAllBusinessDivision
      tags:
        - Business Division
      summary: Get All Business Division
      description: Returns list of Business Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_division_uuid`  - It takes String value.
             * `name` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Division
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  business_division_list:
                    type: array
                    items:
                      $ref: "#/paths/~1businessDivisions~1%7Bbusiness-division-uuid%7D/get/responses/\
                        200/content/application~1json/schema"
                    description: List of the BusinessDivision
  "/businessDivisions/{business-division-uuid}":
    get:
      operationId: getBusinessDivisionByUUID
      tags:
        - Business Division
      summary: Get Business Division by business-division-uuid
      description: Returns the Business Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-division-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Division
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Business Division
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the BusinessDivision
                  - properties:
                      business_division_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the BusinessDivision
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of BusinessDivision
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-division-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Division could not be found in
            the system
    put:
      operationId: createOrUpdateBusinessDivisionByUUID
      tags:
        - Business Division
      summary: Create Or Update Business Division
      description: Create Or Update Business Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-division-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Division
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Division
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessDivisions~1%7Bbusiness-division-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Business Division not existing before and created
            successfully
        "204":
          description: No Content if the Business Division existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-division-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateBusinessDivisionByUUID
      tags:
        - Business Division
      summary: Partial Update Business Division
      description: Partial Update Business Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-division-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Division
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Division
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessDivisions~1%7Bbusiness-division-uuid%7D/get/responses/\
                    200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Business Division updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-division-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Division could not be found in
            the system
    delete:
      operationId: deleteBusinessDivisionByUUID
      tags:
        - Business Division
      summary: Delete Business Division
      description: Delete Business Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-division-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Division
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Business Division deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: BusinessDivision[...] cannot be deactivated. It
                  is still in use by BusinessAreaGroup:[...]"
        "404":
          description: Not Found, if the specified BusinessDivision could not be found in
            the system
  "/businessDivisions/{business-division-uuid}/businessAreaGroups":
    get:
      operationId: getAllBusinessAreaGroupsByBusinessDivision
      tags:
        - Business Division
      summary: Get All Business Area Group Under a Division
      description: Returns list of Business Area Group Under a Division
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-division-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Division
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_division_uuid`  - It takes String value.
             * `business_area_group_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Area Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  business_area_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1businessAreaGroups~1%7Bbusiness-area-group-uuid%7D/get/respons\
                        es/200/content/application~1json/schema"
                    description: List of the BusinessAreaGroup
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-division-uuid must be between 1 and 50
  /businessAreaGroups:
    get:
      operationId: getAllBusinessAreaGroup
      tags:
        - Business Area Group
      summary: Get All Business Area Group
      description: Returns list of Business Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_division_uuid`  - It takes String value.
             * `business_area_group_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Area Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1businessDivisions~1%7Bbusiness-division-uuid%7D~1businessAreaG\
                  roups/get/responses/200/content/application~1json/schema"
  "/businessAreaGroups/{business-area-group-uuid}":
    get:
      operationId: getBusinessAreaGroupByUUID
      tags:
        - Business Area Group
      summary: Get Business Area Group by business-area-group-uuid
      description: Returns the Business Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Business Area Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Business Area Group
                      business_division_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Businedd Division
                  - properties:
                      business_area_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Business Area Group
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Business Area Group
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Area Group could not be found
            in the system
    put:
      operationId: createOrUpdateBusinessAreaGroupByUUID
      tags:
        - Business Area Group
      summary: Create Or Update Business Area Group
      description: Create Or Update Business Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Area Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessAreaGroups~1%7Bbusiness-area-group-uuid%7D/get/respons\
                    es/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - business_division_uuid
      responses:
        "201":
          description: Created if the Business Area Group not existing before and created
            successfully
        "204":
          description: No Content if the Business Area Group existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateBusinessAreaGroupByUUID
      tags:
        - Business Area Group
      summary: Partial Update Business Area Group
      description: Partial Update Business Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Area Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessAreaGroups~1%7Bbusiness-area-group-uuid%7D/get/respons\
                    es/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Business Area Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Area Group could not be found
            in the system
    delete:
      operationId: deleteBusinessAreaGroupByUUID
      tags:
        - Business Area Group
      summary: Delete Business Area Group
      description: Delete Business Area Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Business Area Group deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: BusinessAreaGroup[...] cannot be deactivated.
                  It is still in use by BusinessArea:[...]"
        "404":
          description: Not Found, if the specified BusinessAreaGroup could not be found in
            the system
  "/businessAreaGroups/{business-area-group-uuid}/businessAreas":
    get:
      operationId: getAllBusinessAreasByGroup
      tags:
        - Business Area Group
      summary: Get All Business Area Under a Group
      description: Returns list of Business Area Under a Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_area_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Area
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  business_area_list:
                    type: array
                    items:
                      $ref: "#/paths/~1businessAreas~1%7Bbusiness-area-uuid%7D/get/responses/200/cont\
                        ent/application~1json/schema"
                    description: List of the BusinessArea
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-group-uuid must be between 1 and 50
  /businessAreas:
    get:
      operationId: getAllBusinessArea
      tags:
        - Business Area
      summary: Get All Business Area
      description: Returns list of Business Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_area_uuid`  - It takes String value.
             * `name` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Business Area
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1businessAreaGroups~1%7Bbusiness-area-group-uuid%7D~1businessAr\
                  eas/get/responses/200/content/application~1json/schema"
  "/businessAreas/{business-area-uuid}":
    get:
      operationId: getBusinessAreaByUUID
      tags:
        - Business Area
      summary: Get Business Area by business-area-uuid
      description: Returns the Business Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Business Area
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Business Area
                      business_area_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Business Area Group
                  - properties:
                      business_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Business Area
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Business Area
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Area could not be found in the
            system
    put:
      operationId: createOrUpdateBusinessAreaByUUID
      tags:
        - Business Area
      summary: Create Or Update Business Area
      description: Create Or Update Business Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessAreas~1%7Bbusiness-area-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - business_area_group_uuid
      responses:
        "201":
          description: Created if the Business Area not existing before and created
            successfully
        "204":
          description: No Content if the Business Area existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateBusinessAreaByUUID
      tags:
        - Business Area
      summary: Partial Update Business Area
      description: Partial Update Business Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Business Area
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1businessAreas~1%7Bbusiness-area-uuid%7D/get/responses/200/cont\
                    ent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Business Area updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Business Area could not be found in the
            system
    delete:
      operationId: deleteBusinessAreaByUUID
      tags:
        - Business Area
      summary: Delete Business Area
      description: Delete Business Area
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the BusinessArea
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the BusinessArea deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: BusinessAreas[...] cannot be deactivated. It is
                  still in use by RevenueStream:[...]"
        "404":
          description: Not Found, if the specified BusinessArea could not be found in the
            system
  "/businessAreas/{business-area-uuid}/revenueStreams":
    get:
      operationId: getAllBusinessAreasByRevenueStream
      tags:
        - Business Area
      summary: Get All Business Area Under a RevenueStream
      description: Returns list of Business Area Under a RevenueStream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: business-area-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Business Area
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_area_uuid`  - It takes String value.
             * `revenue_stream_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Revenue Stream
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  revenue_stream_list:
                    type: array
                    items:
                      $ref: "#/paths/~1revenueStreams~1%7Brevenue-stream-uuid%7D/get/responses/200/co\
                        ntent/application~1json/schema"
                    description: List of the RevenueStream
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: business-area-uuid must be between 1 and 50
  /revenueStreams:
    get:
      operationId: getAllRevenueStream
      tags:
        - Revenue Stream
      summary: Get All Revenue Stream
      description: Returns list of Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `business_area_uuid`  - It takes String value.
             * `revenue_stream_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Revenue Stream
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1businessAreas~1%7Bbusiness-area-uuid%7D~1revenueStreams/get/re\
                  sponses/200/content/application~1json/schema"
  "/revenueStreams/{revenue-stream-uuid}":
    get:
      operationId: getRevenueStreamByUUID
      tags:
        - Revenue Stream
      summary: Get Revenue Stream by revenue-stream-uuid
      description: Returns the Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: revenue-stream-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Revenue Stream
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Revenue Stream
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Revenue Stream
                      business_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Revenue Stream
                  - properties:
                      revenue_stream_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Revenue Stream
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Revenue Stream
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: revenue-stream-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Revenue Stream could not be found in
            the system
    put:
      operationId: createOrUpdateRevenueStreamByUUID
      tags:
        - Revenue Stream
      summary: Create Or Update Revenue Stream
      description: Create Or Update Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: revenue-stream-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Revenue Stream
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Revenue Stream
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1revenueStreams~1%7Brevenue-stream-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - business_area_uuid
      responses:
        "201":
          description: Created if the Revenue Stream not existing before and created
            successfully
        "204":
          description: No Content if the Revenue Stream existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: revenue-stream-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateRevenueStreamByUUID
      tags:
        - Revenue Stream
      summary: Partial Update Revenue Stream
      description: Partial Update Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: revenue-stream-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Revenue Stream
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Revenue Stream
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1revenueStreams~1%7Brevenue-stream-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Revenue Stream updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: revenue-stream-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Revenue Stream could not be found in
            the system
    delete:
      operationId: deleteRevenueStreamByUUID
      tags:
        - Revenue Stream
      summary: Delete Revenue Stream
      description: Delete Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: revenue-stream-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Revenue Stream
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Revenue Stream deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: RevenueStream[...] cannot be deactivated. It is
                  still in use by ProductFormat:[...]"
        "404":
          description: Not Found, if the specified RevenueStream could not be found in the
            system
  "/revenueStreams/{revenue-stream-uuid}/productFormats":
    get:
      operationId: getAllProductFormatsByRevenueStream
      tags:
        - Revenue Stream
      summary: Get All Product Format of a Revenue Stream
      description: Returns list of Product Format of a Revenue Stream
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: revenue-stream-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Revenue Stream
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          content:
            application/json:
              schema:
                $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D~1productFormats/get/\
                  responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: revenue-stream-uuid must be between 1 and 50
  /dayParts:
    get:
      operationId: getAllDayPart
      tags:
        - Day Part
      summary: Get All Day Part
      description: Returns list of Day Part
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `day_part_group_uuid` - It takes String value.
             * `start_offset` - It takes Integer value.
             * `end_offset` - It takes Integer value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Day Part
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  day_part_list:
                    type: array
                    items:
                      $ref: "#/paths/~1dayParts~1%7Bday-part-uuid%7D/get/responses/200/content/applic\
                        ation~1json/schema"
                    description: List of the DayPart
  "/dayParts/{day-part-uuid}":
    get:
      operationId: getDayPartByUUID
      tags:
        - Day Part
      summary: Get Day Part by day-part-uuid
      description: Returns the Day Part
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 120
          required: true
          description: Market Universal ID of the Day Part
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Day Part
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      start_offset:
                        type: integer
                        format: int32
                        minimum: 0
                        maximum: 86398
                        description: Start Offset of the Day Part
                      end_offset:
                        type: integer
                        format: int32
                        minimum: 1
                        maximum: 86399
                        description: End Offset of the Day Part
                  - properties:
                      day_part_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Day Part
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-uuid must be between 1 and 120
        "404":
          description: Not Found, if the specified Day Part could not be found in the system
    put:
      operationId: createOrUpdateDayPartByUUID
      tags:
        - Day Part
      summary: Create Or Update Day Part
      description: Create Or Update Day Part
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 120
          required: true
          description: Market Universal ID of the Day Part
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Day Part
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1dayParts~1%7Bday-part-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
                  required:
                    - start_offset
                    - end_offset
      responses:
        "201":
          description: Created if the Day Part not existing before and created successfully
        "204":
          description: No Content if the Day Part existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-uuid must be between 1 and 120
    patch:
      operationId: partialUpdateDayPartByUUID
      tags:
        - Day Part
      summary: Partial Update Day Part
      description: Partial Update Day Part
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 120
          required: true
          description: Market Universal ID of the Day Part
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Day Part
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1dayParts~1%7Bday-part-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Day Part updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-uuid must be between 1 and 120
        "404":
          description: Not Found, if the specified Day Part could not be found in the system
    delete:
      operationId: deleteDayPartByUUID
      tags:
        - Day Part
      summary: Delete Day Part
      description: Delete Day Part
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Day Part
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Day Part updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: DayPart[...] cannot be deactivated. It is still
                  in use by ProductFormat:[...]"
        "404":
          description: Not Found, if the specified DayPart could not be found in the system
  /dayPartGroups:
    get:
      operationId: getAllDayPartGroup
      tags:
        - Day Part Group
      summary: Get All Day Part Group
      description: Returns list of Day Part Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name` - It takes String value.
             * `day_part_group_uuid` - It takes String value.
             * `span_selling` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Day Part Group
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  day_part_group_list:
                    type: array
                    items:
                      $ref: "#/paths/~1dayPartGroups~1%7Bday-part-group-uuid%7D/get/responses/200/con\
                        tent/application~1json/schema"
                    description: List of the DayPartGroup
  "/dayPartGroups/{day-part-group-uuid}":
    get:
      operationId: getDayPartGroupByUUID
      tags:
        - Day Part Group
      summary: Get DayPart Group by day-part-group-uuid
      description: Returns the DayPart Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the DayPart Group
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested DayPart Group
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the DayPartGroup
                      span_selling:
                        type: boolean
                        description: spanSelling of the DayPartGroup
                      day_part_uuids:
                        type: array
                        items:
                          type: string
                        description: Set of Day Part Market Universal IDs which belongs to this Day Part
                          Group
                  - properties:
                      day_part_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the DayPartGroup
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of DayPartGroup
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified DayPart Group  could not be found in
            the system
    put:
      operationId: createOrUpdateDayPartGroupByUUID
      tags:
        - Day Part Group
      summary: Create Or Update DayPart Group
      description: Create Or Update DayPart Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the DayPart Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: DayPart Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1dayPartGroups~1%7Bday-part-group-uuid%7D/get/responses/200/con\
                    tent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the DayPart Group  not existing before and created
            successfully
        "204":
          description: No Content if the DayPart Group existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-group-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateDayPartGroupByUUID
      tags:
        - Day Part Group
      summary: Partial Update DayPart Group
      description: Partial Update DayPart Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the DayPart Group
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: DayPart Group
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1dayPartGroups~1%7Bday-part-group-uuid%7D/get/responses/200/con\
                    tent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the DayPart Group updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-group-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified DayPart Group could not be found in the
            system
    delete:
      operationId: deleteDayPartGroupByUUID
      tags:
        - Day Part Group
      summary: Delete DayPart Group by day-part-group-uuid
      description: Delete the DayPart Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the DayPart Group
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the DayPart Group deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: DayPartGroup[...] can not be deactivated. Its
                  still used by Channel[...]"
        "404":
          description: Not Found, if the specified DayPart Group could not be found in the
            system
  "/dayPartGroups/{day-part-group-uuid}/channels":
    get:
      operationId: getAllChannelsByDayPartGroup
      tags:
        - Day Part Group
      summary: Get All Channel Under a Day Part Group
      description: Returns list of Channel Under a Day Part Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Day Part Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `day_part_group_uuid` - It takes String value.
             * `channel_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Channel
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategories~1%7Baudience-category-uuid%7D~1channels/get\
                  /responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-group-uuid must be between 1 and 50
  "/dayPartGroups/{day-part-group-uuid}/dayParts":
    get:
      operationId: getAllDayPartsByDayPartGroup
      tags:
        - Day Part Group
      summary: Get All DayPart Under a Day Part Group
      description: Returns list of DayPart Under a Day Part Group
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: day-part-group-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Day Part Group
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `day_part_group_uuid` - It takes String value.
             * `channel_uuid` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of DayPart
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1dayParts/get/responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: day-part-group-uuid must be between 1 and 50
  /channels:
    get:
      operationId: getAllChannels
      tags:
        - Channel
      summary: Get All Channels
      description: Returns list of Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `audience_category_uuid`  - It takes String value.
             * `day_part_group_uuid`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `name` - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Channel
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategories~1%7Baudience-category-uuid%7D~1channels/get\
                  /responses/200/content/application~1json/schema"
  "/channels/{channel-uuid}/productFormats":
    get:
      operationId: getAllProductFormatsByChannel
      tags:
        - Channel
      summary: Get All Product Format of a Channel
      description: Returns list of Product Format of a Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: channel-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Channel
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          content:
            application/json:
              schema:
                $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D~1productFormats/get/\
                  responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: channel-uuid must be between 1 and 50
  "/channels/{channel-uuid}":
    get:
      operationId: getChannelByUUID
      tags:
        - Channel
      summary: Get Channel by channel-uuid
      description: Returns the Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: channel-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Channel
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Channel
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Channel
                      day_part_group_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the DayPart Group
                      audience_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Audience Category
                  - properties:
                      channel_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Channel
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Channel
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: channel-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Channel could not be found in the system
    put:
      operationId: createOrUpdateChannelByUUID
      tags:
        - Channel
      summary: Create Or Update Channel
      description: Create Or Update Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: channel-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Channel
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Channel
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1channels~1%7Bchannel-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - day_part_group_uuid
                    - audience_category_uuid
      responses:
        "201":
          description: Created if the Channel not existing before and created successfully
        "204":
          description: No Content if the Channel existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: channel-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateChannelByUUID
      tags:
        - Channel
      summary: Partial Update Channel
      description: Partial Update Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: channel-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Channel
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Channel
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1channels~1%7Bchannel-uuid%7D/get/responses/200/content/applica\
                    tion~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Channel updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: channel-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Channel could not be found in the system
    delete:
      operationId: deleteChannelByUUID
      tags:
        - Channel
      summary: Delete Channel
      description: Delete Channel
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: channel-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Channel
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Channel updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: Channel[...] cannot be deactivated. It is still
                  in use by ProductFormats:[...]"
        "404":
          description: Not Found, if the specified Channel could not be found in the system
  /productFormats:
    get:
      operationId: getAllProductFormat
      tags:
        - Product Format
      summary: Get All Product Format
      description: Returns list of Product Format
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `channel_uuid`  - It takes String value.
             * `invoicing_type_uuid`  - It takes String value.
             * `pricing_type_uuid`  - It takes String value.
             * `product_format_marketing_uuid`  - It takes String value.
             * `revenue_stream_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `period_type`  - It takes PeriodTypeEnum Enum value.
             * `display_offset`  - It takes DaysEnum Enum value.
             * `digital`  - It takes Boolean value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Product Format
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1invoicingTypes~1%7Binvoicing-type-uuid%7D~1productFormats/get/\
                  responses/200/content/application~1json/schema"
  "/productFormats/{product-format-uuid}":
    get:
      operationId: getProductFormatByUUID
      tags:
        - Product Format
      summary: Get Product Format by product-format-uuid
      description: Returns the Product Format
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Format
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Product Format
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Format
                      channel_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Channel
                      invoicing_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Invoicing Type
                      pricing_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Pricing Type
                      product_format_marketing_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Format Marketing
                      revenue_stream_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Revenue Stream
                      digital:
                        type: boolean
                        description: Product Format is Digital or not
                      display_offset:
                        type: string
                        enum:
                          - MONDAY
                          - TUESDAY
                          - WEDNESDAY
                          - THURSDAY
                          - FRIDAY
                          - SATURDAY
                          - SUNDAY
                        description: display Offset of the Product Format
                      period_type:
                        type: string
                        enum:
                          - SPAN
                          - DAYPART
                          - DAY
                          - WEEK
                          - WEEK_OFFSET
                        description: period Type of the Product Format
                  - properties:
                      product_format_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Format
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Product Format
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Format could not be found in
            the system
    put:
      operationId: createOrUpdateProductFormatByUUID
      tags:
        - Product Format
      summary: Create Or Update Product Format
      description: Create Or Update Product Format
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Format
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Format
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productFormats~1%7Bproduct-format-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - channel_uuid
                    - invoicing_type_uuid
                    - product_format_marketing_uuid
                    - revenue_stream_uuid
                    - display_offset
                    - period_type
      responses:
        "201":
          description: Created if the Product Format not existing before and created
            successfully
        "204":
          description: No Content if the Product Format existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProductFormatByUUID
      tags:
        - Product Format
      summary: Partial Update Product Format
      description: Partial Update Product Format
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Format
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Product Format
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1productFormats~1%7Bproduct-format-uuid%7D/get/responses/200/co\
                    ntent/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Product Format updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: product-format-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Product Format could not be found in
            the system
    delete:
      operationId: deleteProductFormatByUUID
      tags:
        - Product Format
      summary: Delete Product Format
      description: Delete Product Format
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: product-format-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Product Format
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Product Format deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProductFormat[...] cannot be deactivated. It is
                  still in use by Assets:[...]"
        "404":
          description: Not Found, if the specified ProductFormat could not be found in the
            system
  /poiTypes:
    get:
      operationId: getAllPoiTypess
      tags:
        - Poi Type
      summary: Get All Poi Types
      description: Returns list of Poi Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Type
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  poi_type_list:
                    type: array
                    items:
                      $ref: "#/paths/~1poiTypes~1%7Bpoi-type-uuid%7D/get/responses/200/content/applic\
                        ation~1json/schema"
                    description: List of the Poi Type
  "/poiTypes/{poi-type-uuid}":
    get:
      operationId: getPoiTypeByUUID
      tags:
        - Poi Type
      summary: Get Poi Type by poi-type-uuid
      description: Returns the Poi Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Type
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Poi Type
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Poi Type
                      poi_attributes:
                        type: array
                        items:
                          type: string
                          enum:
                            - DEFAULT
                            - CATEGORY
                            - SUBCATEGORY
                            - BRAND
                            - LOCATION_NAME
                        description: Set of Poi Attributes which belongs to this Poi Type
                  - properties:
                      poi_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Poi Type
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Poi Type
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Poi Type could not be found in the system
    put:
      operationId: createOrUpdatePoiTypeByUUID
      tags:
        - Poi Type
      summary: Create Or Update Poi Type
      description: Create Or Update Poi Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiTypes~1%7Bpoi-type-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Poi Type not existing before and created successfully
        "204":
          description: No Content if the Poi Type existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-type-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePoiTypeByUUID
      tags:
        - Poi Type
      summary: Partial Update Poi Type
      description: Partial Update Poi Type
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Type
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Type
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiTypes~1%7Bpoi-type-uuid%7D/get/responses/200/content/applic\
                    ation~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Poi Type updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-type-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Poi Type could not be found in the system
    delete:
      operationId: deletePoiTypeByUUID
      tags:
        - PoiType
      summary: Delete PoiType
      description: Delete PoiType
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PoiType
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PoiType deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PoiType[XXX] can not be deactivated. Its still
                  used by PoiLocation [List poi location Codes]"
        "404":
          description: Not Found, if the specified PoiType could not be found in the system
  /poiCategories:
    get:
      operationId: getAllPoiCatagories
      tags:
        - Poi Category
      summary: Get All Poi Categories
      description: Returns list of Poi Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Category
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  poi_category_list:
                    type: array
                    items:
                      $ref: "#/paths/~1poiCategories~1%7Bpoi-category-uuid%7D/get/responses/200/conte\
                        nt/application~1json/schema"
                    description: List of the Poi Category
  "/poiCategories/{poi-category-uuid}":
    get:
      operationId: getPoiCategoryByUUID
      tags:
        - Poi Category
      summary: Get Poi Category by poi-category-uuid
      description: Returns the Poi Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Category
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Poi Category
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Poi Category
                  - properties:
                      poi_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi Category
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Poi Category
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-category-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Category could not be found in the
            system
    put:
      operationId: createOrUpdatePoiCategoryByUUID
      tags:
        - Poi Category
      summary: Create Or Update Poi Category
      description: Create Or Update Poi Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiCategories~1%7Bpoi-category-uuid%7D/get/responses/200/conte\
                    nt/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Poi Category not existing before and created
            successfully
        "204":
          description: No Content if the Poi Category existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-category-uuid must be between 1 and 100
    patch:
      operationId: partialUpdatePoiCategoryByUUID
      tags:
        - Poi Category
      summary: Partial Update Poi Category
      description: Partial Update Poi Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiCategories~1%7Bpoi-category-uuid%7D/get/responses/200/conte\
                    nt/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Poi Category updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-category-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Category could not be found in the
            system
    delete:
      operationId: deletePoiCategoryByUUID
      tags:
        - PoiCategory
      summary: Delete PoiCategory
      description: Delete PoiCategory
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PoiCategory
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PoiCategory deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PoiCategory[XXX] can not be deactivated. Its
                  still used by PoiLocation [List poi location Codes]"
        "404":
          description: Not Found, if the specified PoiCategory could not be found in the
            system
  /poiSubCategories:
    get:
      operationId: getAllPoiSubCatagories
      tags:
        - Poi Sub Category
      summary: Get All Poi Sub-Categories
      description: Returns list of Poi Sub-Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Sub-Category
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  poi_sub_category_list:
                    type: array
                    items:
                      $ref: "#/paths/~1poiSubCategories~1%7Bpoi-sub-category-uuid%7D/get/responses/20\
                        0/content/application~1json/schema"
                    description: List of the Poi Sub-Category
  "/poiSubCategories/{poi-sub-category-uuid}":
    get:
      operationId: getPoiSubCategoryByUUID
      tags:
        - Poi Sub Category
      summary: Get Poi Sub Category by poi-sub-category-uuid
      description: Returns the Poi Sub Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-sub-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Sub Category
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Poi Sub Category
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Poi SubCategory
                  - properties:
                      poi_sub_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi SubCategory
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Poi SubCategory
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-sub-category-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Sub Category could not be found in
            the system
    put:
      operationId: createOrUpdatePoiSubCategoryByUUID
      tags:
        - Poi Sub Category
      summary: Create Or Update Poi Sub Category
      description: Create Or Update Poi Sub Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-sub-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Sub Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Sub Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiSubCategories~1%7Bpoi-sub-category-uuid%7D/get/responses/20\
                    0/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Poi Sub Category not existing before and created
            successfully
        "204":
          description: No Content if the Poi Sub Category existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-sub-category-uuid must be between 1 and 100
    patch:
      operationId: partialUpdatePoiSubCategoryByUUID
      tags:
        - Poi Sub Category
      summary: Partial Update Poi Sub Category
      description: Partial Update Poi Sub Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-sub-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Sub Category
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Sub Category
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiSubCategories~1%7Bpoi-sub-category-uuid%7D/get/responses/20\
                    0/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Poi Sub Category updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-sub-category-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Sub Category could not be found in
            the system
    delete:
      operationId: deletePoiSubCategoryByUUID
      tags:
        - PoiSubCategory
      summary: Delete PoiSubCategory
      description: Delete PoiSubCategory
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-sub-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PoiSubCategory
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PoiSubCategory deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PoiSubCategory[XXX] can not be deactivated. Its
                  still used by PoiLocation [List poi location Codes]"
        "404":
          description: Not Found, if the specified PoiSubCategory could not be found in
            the system
  /poiBrands:
    get:
      operationId: getAllPoiBrands
      tags:
        - Poi Brand
      summary: Get All Poi Brands
      description: Returns list of Poi Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Brand
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  poi_brand_list:
                    type: array
                    items:
                      $ref: "#/paths/~1poiBrands~1%7Bpoi-brand-uuid%7D/get/responses/200/content/appl\
                        ication~1json/schema"
                    description: List of the Poi Brand
  "/poiBrands/{poi-brand-uuid}":
    get:
      operationId: getPoiBrandByUUID
      tags:
        - Poi Brand
      summary: Get Poi Brand by poi-brand-uuid
      description: Returns the Poi Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Brand
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Poi Brand
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Poi Brand
                  - properties:
                      poi_brand_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi Brand
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Poi Brand
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-brand-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Brand could not be found in the
            system
    put:
      operationId: createOrUpdatePoiBrandByUUID
      tags:
        - Poi Brand
      summary: Create Or Update Poi Brand
      description: Create Or Update Poi Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Brand
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Brand
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiBrands~1%7Bpoi-brand-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
      responses:
        "201":
          description: Created if the Poi Brand not existing before and created successfully
        "204":
          description: No Content if the Poi Brand existing before and updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-brand-uuid must be between 1 and 100
    patch:
      operationId: partialUpdatePoiBrandByUUID
      tags:
        - Poi Brand
      summary: Partial Update Poi Brand
      description: Partial Update Poi Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Brand
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Brand
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiBrands~1%7Bpoi-brand-uuid%7D/get/responses/200/content/appl\
                    ication~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Poi Brand updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-brand-uuid must be between 1 and 100
        "404":
          description: Not Found, if the specified Poi Brand could not be found in the
            system
    delete:
      operationId: deletePoiBrandByUUID
      tags:
        - PoiBrand
      summary: Delete PoiBrand
      description: Delete PoiBrand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PoiBrand
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PoiBrand deactivated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: PoiBrand[XXX] can not be deactivated. Its still
                  used by PoiLocation [List poi location Codes]"
        "404":
          description: Not Found, if the specified PoiBrand could not be found in the system
  /poiLocations:
    get:
      operationId: getAllPoiLocations
      tags:
        - Poi Location
      summary: Get All Poi Locations
      description: Returns list of Poi Location
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_location_uuid`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `latitude`  - It takes Double value.
             * `longitude`  - It takes Double value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Location
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  poi_location_list:
                    type: array
                    items:
                      $ref: "#/paths/~1poiLocations~1%7Bpoi-location-uuid%7D/get/responses/200/conten\
                        t/application~1json/schema"
                    description: List of the Poi Location
  "/poiBrands/{poi-brand-uuid}/poiLocations":
    get:
      operationId: getAllPoiLocationsByPoiBrand
      tags:
        - Poi Location
      summary: Get All Poi Locations of given Poi Brand
      description: Returns list of Poi Location of given Poi Brand
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-brand-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Brand
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_location_uuid`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `latitude`  - It takes Double value.
             * `longitude`  - It takes Double value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Location
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1poiLocations/get/responses/200/content/application~1json/schem\
                  a"
  "/poiCategories/{poi-category-uuid}/poiLocations":
    get:
      operationId: getAllPoiLocationsByPoiCatgory
      tags:
        - Poi Location
      summary: Get All Poi Locations of given Poi Category
      description: Returns list of Poi Location of given Poi Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Category
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_location_uuid`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `latitude`  - It takes Double value.
             * `longitude`  - It takes Double value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Location
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1poiLocations/get/responses/200/content/application~1json/schem\
                  a"
  "/poiSubCategories/{poi-sub-category-uuid}/poiLocations":
    get:
      operationId: getAllPoiLocationsByPoiSubCategory
      tags:
        - Poi Location
      summary: Get All Poi Locations of given Poi Sub Category
      description: Returns list of Poi Location of given Poi Sub Category
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-sub-category-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          description: Market Universal ID of the Poi Sub Category
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_location_uuid`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `latitude`  - It takes Double value.
             * `longitude`  - It takes Double value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Location
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1poiLocations/get/responses/200/content/application~1json/schem\
                  a"
  "/poiTypes/{poi-type-uuid}/poiLocations":
    get:
      operationId: getAllPoiLocationsByPoiType
      tags:
        - Poi Location
      summary: Get All Poi Locations of given PoiType
      description: Returns list of Poi Location of given PoiType
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-type-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Type
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `poi_location_uuid`  - It takes String value.
             * `poi_type_uuid`  - It takes String value.
             * `poi_category_uuid`  - It takes String value.
             * `poi_sub_category_uuid`  - It takes String value.
             * `poi_brand_uuid`  - It takes String value.
             * `latitude`  - It takes Double value.
             * `longitude`  - It takes Double value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Poi Location
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                $ref: "#/paths/~1poiLocations/get/responses/200/content/application~1json/schem\
                  a"
  "/poiLocations/{poi-location-uuid}":
    get:
      operationId: getPoiLocationByUUID
      tags:
        - Poi Location
      summary: Get Poi Location by poi-location-uuid
      description: Returns the Poi Location
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-location-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Location
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Poi Location
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Poi Location
                      poi_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Poi Type
                      poi_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi Category
                      poi_sub_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi SubCategory
                      poi_brand_uuid:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Market Universal ID of the Poi Brand
                      longitude:
                        type: number
                        format: double
                        minimum: -180
                        maximum: 180
                        description: longitude of the Poi Location
                      latitude:
                        type: number
                        format: double
                        minimum: -90
                        maximum: 90
                        description: latitude of the Poi Location
                  - properties:
                      poi_location_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Poi Location
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Poi Location
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-location-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Poi Location could not be found in the
            system
    put:
      operationId: createOrUpdatePoiLocationByUUID
      tags:
        - Poi Location
      summary: Create Or Update Poi Location
      description: Create Or Update Poi Location
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-location-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Location
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Location
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiLocations~1%7Bpoi-location-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
                    - poi_type_uuid
                    - poi_category_uuid
                    - poi_sub_category_uuid
                    - poi_brand_uuid
      responses:
        "201":
          description: Created if the Poi Location not existing before and created
            successfully
        "204":
          description: No Content if the Poi Location existing before and updated
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-location-uuid must be between 1 and 50
    patch:
      operationId: partialUpdatePoiLocationByUUID
      tags:
        - Poi Location
      summary: Partial Update Poi Location
      description: Partial Update Poi Location
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-location-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Poi Location
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Poi Location
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1poiLocations~1%7Bpoi-location-uuid%7D/get/responses/200/conten\
                    t/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Poi Location updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-location-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Poi Location could not be found in the
            system
    delete:
      operationId: deletePoiLocationByUUID
      tags:
        - Poi Location
      summary: Delete PoiLocation
      description: Delete PoiLocation
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: poi-location-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the PoiLocation
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the PoiLocation deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: poi-location-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified PoiLocation could not be found in the
            system
  /assets:
    get:
      operationId: getAllAssets
      tags:
        - Asset
      summary: Get All Assets
      description: Returns list of Asset
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `site_code`  - It takes String value.
             * `furniture_code`  - It takes String value.
             * `furniture_index`  - It takes String value.
             * `route_frame_code`  - It takes String value.
             * `frame_alt_code`  - It takes String value.
             * `address_detail_1`  - It takes String value.
             * `address_detail_2`  - It takes String value.
             * `address_complement_1`  - It takes String value.
             * `address_complement_2`  - It takes String value.
             * `longitude`  - It takes Double value.
             * `latitude`  - It takes Double value.
             * `visual_unit_code`  - It takes String value.
             * `linked_asset_code`  - It takes String value.
             * `saturate`  - It takes Boolean value.
             * `schedule`  - It takes Boolean value.
             * `smart_content`  - It takes Boolean value.
             * `indoor`  - It takes Boolean value.
             * `deal_api_enabled`  - It takes Boolean value.
             * `asset_type`  - It takes String Enum values: STATIC, SCROLLING, DIGITAL
             * `venue_type`  - It takes String Enum values: OOH_VENUE_UNSPECIFIED, OOH_VENUE_AIRBORNE, OOH_VENUE_AIRPORTS_GENERAL, OOH_VENUE_AIRPORTS_BAGGAGE_CLAIM, OOH_VENUE_AIRPORTS_TERMINAL, OOH_VENUE_AIRPORTS_LOUNGES, OOH_VENUE_ATMS, OOH_VENUE_BACKLIGHTS, OOH_VENUE_BARS, OOH_VENUE_BENCHES, OOH_VENUE_BIKE_RACKS, OOH_VENUE_BULLETINS, OOH_VENUE_BUSES, OOH_VENUE_CAFES, OOH_VENUE_CASUAL_DINING_RESTAURANTS, OOH_VENUE_CHILD_CARE, OOH_VENUE_CINEMA, OOH_VENUE_CITY_INFORMATION_PANELS, OOH_VENUE_CONVENIENCE_STORES, OOH_VENUE_DEDICATED_WILD_POSTING, OOH_VENUE_DOCTORS_OFFICES_GENERAL, OOH_VENUE_DOCTORS_OFFICES_OBSTETRICS, OOH_VENUE_DOCTORS_OFFICES_PEDIATRICS, OOH_VENUE_FAMILY_ENTERTAINMENT, OOH_VENUE_FERRIES, OOH_VENUE_FINANCIAL_SERVICES, OOH_VENUE_GAS_STATIONS, OOH_VENUE_GOLF_COURSES, OOH_VENUE_GYMS, OOH_VENUE_HOSPITALS, OOH_VENUE_HOTELS, OOH_VENUE_JUNIOR_POSTERS, OOH_VENUE_KIOSKS, OOH_VENUE_MALLS_GENERAL, OOH_VENUE_MALLS_FOOD_COURTS, OOH_VENUE_MARINE, OOH_VENUE_MOBILE_BILLBOARDS, OOH_VENUE_MOVIE_THEATER_LOBBIES, OOH_VENUE_NEWSSTANDS, OOH_VENUE_OFFICE_BUILDINGS, OOH_VENUE_PHONE_KIOSKS, OOH_VENUE_POSTERS, OOH_VENUE_QSR, OOH_VENUE_RAIL, OOH_VENUE_RECEPTACLES, OOH_VENUE_RESORTS, OOH_VENUE_RETAIL, OOH_VENUE_SALONS, OOH_VENUE_SHELTERS, OOH_VENUE_SPORTS_ARENAS, OOH_VENUE_SUBWAY, OOH_VENUE_TAXIS, OOH_VENUE_TRUCKSIDE, OOH_VENUE_UNIVERSITIES, OOH_VENUE_URBAN_PANELS, OOH_VENUE_VETERINARIAN_OFFICES, OOH_VENUE_WALLS, OOH_VENUE_OTHER
             * `display_offset`  - It takes String Enum values: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
             * `time_zone`  - It takes String value.
             * `site_type_uuid`  - It takes String value.
             * `model_uuid`  - It takes String value.
             * `postcode_uuid`  - It takes String value.
             * `district_uuid`  - It takes String value.
             * `tv_area_uuid`  - It takes String value.
             * `conurbation_uuid`  - It takes String value.
             * `route_town_uuid`  - It takes String value.
             * `product_format_uuid`  - It takes String value.
             * `digital_spec_uuid`  - It takes String value.
             * `loop_policy_uuid`  - It takes String value.
             * `frame_orientation_uuid`  - It takes String value.
             * `frame_size_uuid`  - It takes String value.
             * `venue_taxonomy_enumeration_id`  - It takes Integer value.
             * `geographical_area_uuid`  - It takes String value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Asset
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  asset_list:
                    type: array
                    items:
                      $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                        ~1json/schema"
                    description: List of the Asset
  "/assets/{asset-uuid}":
    get:
      operationId: getAssetByUUID
      tags:
        - Asset
      summary: Get Asset by asset-uuid
      description: Returns the Asset
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Asset
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      site_code:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Site Code of Asset
                      furniture_code:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Furniture Code of Asset
                      furniture_index:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Furniture Index of Asset
                      route_frame_code:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Route Frame of Asset
                      address_detail_1:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Address Detail-1 of Asset
                      address_detail_2:
                        type: string
                        maxLength: 100
                        description: Address Detail-2 of Asset
                      address_complement_1:
                        type: string
                        maxLength: 100
                        description: Address Complement-1 of Asset
                      address_complement_2:
                        type: string
                        maxLength: 100
                        description: Address Complement-2 of Asset
                      longitude:
                        type: number
                        format: double
                        minimum: -180
                        maximum: 180
                        description: Longitude of Asset
                      latitude:
                        type: number
                        format: double
                        minimum: -90
                        maximum: 90
                        description: Latitude of Asset
                      visual_unit_code:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Visual Unit Code of Asset
                      linked_asset_code:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Linked Asset Code of Asset
                      saturate:
                        type: boolean
                        description: Whether Asset saturated or not
                      schedule:
                        type: boolean
                        description: Whether Asset scheduled or not
                      smart_content:
                        type: boolean
                        description: Whether Asset supports smart-content or not
                      indoor:
                        type: boolean
                        description: Whether Asset indoor or outdoor
                      deal_api_enabled:
                        type: boolean
                        description: Whether Asset is allowed for DV360
                      asset_type:
                        type: string
                        enum:
                          - STATIC
                          - SCROLLING
                          - DIGITAL
                        description: Type of Asset
                      venue_type:
                        type: string
                        enum:
                          - OOH_VENUE_UNSPECIFIED
                          - OOH_VENUE_AIRBORNE
                          - OOH_VENUE_AIRPORTS_GENERAL
                          - OOH_VENUE_AIRPORTS_BAGGAGE_CLAIM
                          - OOH_VENUE_AIRPORTS_TERMINAL
                          - OOH_VENUE_AIRPORTS_LOUNGES
                          - OOH_VENUE_ATMS
                          - OOH_VENUE_BACKLIGHTS
                          - OOH_VENUE_BARS
                          - OOH_VENUE_BENCHES
                          - OOH_VENUE_BIKE_RACKS
                          - OOH_VENUE_BULLETINS
                          - OOH_VENUE_BUSES
                          - OOH_VENUE_CAFES
                          - OOH_VENUE_CASUAL_DINING_RESTAURANTS
                          - OOH_VENUE_CHILD_CARE
                          - OOH_VENUE_CINEMA
                          - OOH_VENUE_CITY_INFORMATION_PANELS
                          - OOH_VENUE_CONVENIENCE_STORES
                          - OOH_VENUE_DEDICATED_WILD_POSTING
                          - OOH_VENUE_DOCTORS_OFFICES_GENERAL
                          - OOH_VENUE_DOCTORS_OFFICES_OBSTETRICS
                          - OOH_VENUE_DOCTORS_OFFICES_PEDIATRICS
                          - OOH_VENUE_FAMILY_ENTERTAINMENT
                          - OOH_VENUE_FERRIES
                          - OOH_VENUE_FINANCIAL_SERVICES
                          - OOH_VENUE_GAS_STATIONS
                          - OOH_VENUE_GOLF_COURSES
                          - OOH_VENUE_GYMS
                          - OOH_VENUE_HOSPITALS
                          - OOH_VENUE_HOTELS
                          - OOH_VENUE_JUNIOR_POSTERS
                          - OOH_VENUE_KIOSKS
                          - OOH_VENUE_MALLS_GENERAL
                          - OOH_VENUE_MALLS_FOOD_COURTS
                          - OOH_VENUE_MARINE
                          - OOH_VENUE_MOBILE_BILLBOARDS
                          - OOH_VENUE_MOVIE_THEATER_LOBBIES
                          - OOH_VENUE_NEWSSTANDS
                          - OOH_VENUE_OFFICE_BUILDINGS
                          - OOH_VENUE_PHONE_KIOSKS
                          - OOH_VENUE_POSTERS
                          - OOH_VENUE_QSR
                          - OOH_VENUE_RAIL
                          - OOH_VENUE_RECEPTACLES
                          - OOH_VENUE_RESORTS
                          - OOH_VENUE_RETAIL
                          - OOH_VENUE_SALONS
                          - OOH_VENUE_SHELTERS
                          - OOH_VENUE_SPORTS_ARENAS
                          - OOH_VENUE_SUBWAY
                          - OOH_VENUE_TAXIS
                          - OOH_VENUE_TRUCKSIDE
                          - OOH_VENUE_UNIVERSITIES
                          - OOH_VENUE_URBAN_PANELS
                          - OOH_VENUE_VETERINARIAN_OFFICES
                          - OOH_VENUE_WALLS
                          - OOH_VENUE_OTHER
                        description: Venue Type of Asset
                      display_offset:
                        type: string
                        enum:
                          - MONDAY
                          - TUESDAY
                          - WEDNESDAY
                          - THURSDAY
                          - FRIDAY
                          - SATURDAY
                          - SUNDAY
                        description: Display Offset of Asset
                      site_type_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Site Type
                      site_type_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Site Type
                      model_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Model
                      model_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Model
                      postcode_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Postcode
                      district_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the District
                      tv_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the TV Area
                      conurbation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Conurbation
                      route_town_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Route Town
                      product_format_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Product Format
                      product_format_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Product Format
                      digital_spec_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Digital Spec
                      digital_spec_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Digital Spec
                      loop_policy_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Loop Policy
                      loop_policy_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Loop Policy
                      frame_orientation_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Orientation
                      frame_orientation_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Frame Orientation
                      frame_size_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Frame Size
                      frame_size_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Frame Size
                      geographical_area_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Geographical Area
                      frame_alt_code:
                        type: string
                        maxLength: 50
                        description: FrameAltCode of Asset
                      programmatic_network_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Programmatic Network
                      programmatic_network_name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Programmatic Network
                      venue_taxonomy_enumeration_id:
                        type: integer
                        description: Enumeration ID of the Venue Taxonomy
                      venue_taxonomy_category_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Venue Taxonomy Category
                      digital_players:
                        type: array
                        items:
                          type: object
                          properties:
                            digital_unit_uuid:
                              type: integer
                              format: int32
                              minimum: 0
                              description: Digital Unit  UUID of the Digital Player
                            digital_player_uuid:
                              type: integer
                              format: int32
                              minimum: 0
                              description: Digital Player  UUID of the Digital Player
                            backup:
                              type: boolean
                              description: Digital Player Backup flag
                          required:
                            - digital_unit_uuid
                            - digital_player_uuid
                            - backup
                        description: Digital Player List of the Asset
                      tags:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Tag
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Tag
                            tag_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Tag
                            tag_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Tag
                          required:
                            - start_date
                            - end_date
                            - tag_uuid
                        description: Tag List of the Asset
                      statuses:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Availability
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Availability
                            status:
                              type: string
                              enum:
                                - MOUNTED
                                - DISMOUNTED
                          required:
                            - start_date
                            - end_date
                            - status
                        description: Status List of the Asset
                      time_models:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Time Model
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Time Model
                            days:
                              type: array
                              items:
                                type: string
                                enum:
                                  - MONDAY
                                  - TUESDAY
                                  - WEDNESDAY
                                  - THURSDAY
                                  - FRIDAY
                                  - SATURDAY
                                  - SUNDAY
                            start_offset:
                              type: integer
                              format: int32
                              minimum: 0
                              maximum: 86398
                              description: Start Offset of the Asset Time Model
                            end_offset:
                              type: integer
                              format: int32
                              minimum: 1
                              maximum: 86399
                              description: End Offset of the Asset Time Model
                          required:
                            - start_date
                            - end_date
                            - days
                            - start_offset
                            - end_offset
                        description: Time Model List of the Asset
                      allotments:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Allotment
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Allotment
                            days:
                              type: array
                              items:
                                type: string
                                enum:
                                  - MONDAY
                                  - TUESDAY
                                  - WEDNESDAY
                                  - THURSDAY
                                  - FRIDAY
                                  - SATURDAY
                                  - SUNDAY
                            start_offset:
                              type: integer
                              format: int32
                              minimum: 0
                              maximum: 86398
                              description: Start Offset of the Asset Allotment
                            end_offset:
                              type: integer
                              format: int32
                              minimum: 1
                              maximum: 86399
                              description: End Offset of the Asset Allotment
                            sot:
                              type: number
                              format: double
                              minimum: 0
                              maximum: 100
                              description: SOT of the Asset Allotment
                          required:
                            - start_date
                            - end_date
                            - days
                            - start_offset
                            - end_offset
                            - sot
                        description: Allotment List of the Asset
                      prices:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Price
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Price
                            days:
                              type: array
                              items:
                                type: string
                                enum:
                                  - MONDAY
                                  - TUESDAY
                                  - WEDNESDAY
                                  - THURSDAY
                                  - FRIDAY
                                  - SATURDAY
                                  - SUNDAY
                            day_part_code:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the DayPart
                            price_type:
                              type: string
                              enum:
                                - STANDARD
                                - TACTICAL_DAY_PART
                                - TACTICAL_FULL_DAY
                                - RETAIL_ZONE_UPLIFT
                                - QUOD_VALUE_FACTOR
                                - FLAT_WEEK_PRICE
                                - FLAT_DAY_PRICE
                                - FLAT_HOUR_PRICE
                                - RATE_CARD_FACTOR
                                - FIXED_PRICE
                                - TOWN_FACTOR
                                - ZONE_PRICING
                                - BASE_CPT
                                - TECHNICAL_FEE
                                - PMP_CPT
                            price_cover:
                              type: number
                              format: double
                              minimum: 0
                              description: Price cover of the Asset Price
                            price:
                              type: number
                              format: double
                              minimum: 0
                              description: Price of the Asset Price
                            start_offset:
                              type: integer
                              description: Start Offset of Asset Price
                            end_offset:
                              type: integer
                              description: End Offset of Asset Price
                          required:
                            - start_date
                            - end_date
                            - days
                            - price_type
                            - price_cover
                            - price
                        description: Price List of the Asset
                      prohibitions:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Prohibition
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Prohibition
                            product_category_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Product Category
                            product_category_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Product Category
                          required:
                            - start_date
                            - end_date
                            - product_category_uuid
                        description: Prohibition List of the Asset
                      prohibition_counters:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Prohibition Counter
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Prohibition Counter
                            product_category_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Product Category
                            organisation_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Organisation
                            product_category_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Product Category
                            organisation_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Organisation
                          required:
                            - start_date
                            - end_date
                            - product_category_uuid
                            - organisation_uuid
                        description: Prohibition Counter List of the Asset
                      blacklists:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Blacklist
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Asset Blacklist
                            organisation_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Organisation
                          required:
                            - start_date
                            - end_date
                            - organisation_uuid
                        description: Blacklist List of the Asset
                      illumination_statuses:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Illumination Status
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Illumination Status
                            illuminated:
                              type: boolean
                              description: Whether Asset illuminated for the time defined or not
                          required:
                            - start_date
                            - end_date
                            - illuminated
                        description: Illumination Status List of the Asset
                      offers:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Offer
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Offer
                            default_offers:
                              type: integer
                              description: Default Offers of the Asset Offer
                            override_sot:
                              type: number
                              format: double
                              minimum: 0
                              maximum: 100
                              description: Override SOT of the Asset Offer
                            offer_mask:
                              type: string
                              description: Available faces of Frame in time, e.g. if 1st and 3rd faces are
                                available then, it is "1,3"
                          required:
                            - start_date
                            - end_date
                            - default_offers
                        description: Offer List of the Asset
                      networks:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Network
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Network
                            network_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Network
                            price_factor:
                              type: number
                              format: double
                              minimum: 0
                              description: Price cover of the Asset Network
                            network_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Network
                            network_group_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Network Group
                            network_group_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Network Group
                          required:
                            - start_date
                            - end_date
                            - network_uuid
                            - price_factor
                        description: Network List of the Asset
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Product
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Product
                            product_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Product
                            product_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Product
                          required:
                            - start_date
                            - end_date
                            - product_uuid
                        description: Product List of the Asset
                      characteristics:
                        type: array
                        items:
                          type: object
                          properties:
                            start_date:
                              type: string
                              format: date
                              description: Start Date of the Asset Characteristic
                            end_date:
                              type: string
                              format: date
                              description: End Date of the Asset Characteristic
                            characteristic_uuid:
                              type: string
                              minLength: 1
                              maxLength: 50
                              description: Market Universal ID of the Characteristic
                            characteristic_name:
                              type: string
                              minLength: 1
                              maxLength: 100
                              description: Name of the Characteristic
                          required:
                            - start_date
                            - end_date
                            - characteristic_uuid
                        description: Characteristic List of the Asset
                  - properties:
                      asset_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Asset
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Asset
                      time_zone:
                        type: string
                        description: Time Zone of Asset
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Asset could not be found in the system
    put:
      operationId: createOrUpdateAssetByUUID
      tags:
        - Asset
      summary: Create Or Update Asset
      description: Create Or Update Asset
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Asset
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    site_code:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Site Code of Asset
                    furniture_code:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Furniture Code of Asset
                    furniture_index:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Furniture Index of Asset
                    route_frame_code:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Route Frame of Asset
                    address_detail_1:
                      type: string
                      minLength: 1
                      maxLength: 100
                      description: Address Detail-1 of Asset
                    address_detail_2:
                      type: string
                      maxLength: 100
                      description: Address Detail-2 of Asset
                    address_complement_1:
                      type: string
                      maxLength: 100
                      description: Address Complement-1 of Asset
                    address_complement_2:
                      type: string
                      maxLength: 100
                      description: Address Complement-2 of Asset
                    longitude:
                      type: number
                      format: double
                      minimum: -180
                      maximum: 180
                      description: Longitude of Asset
                    latitude:
                      type: number
                      format: double
                      minimum: -90
                      maximum: 90
                      description: Latitude of Asset
                    visual_unit_code:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Visual Unit Code of Asset
                    linked_asset_code:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Linked Asset Code of Asset
                    saturate:
                      type: boolean
                      description: Whether Asset saturated or not
                    schedule:
                      type: boolean
                      description: Whether Asset scheduled or not
                    smart_content:
                      type: boolean
                      description: Whether Asset supports smart-content or not
                    indoor:
                      type: boolean
                      description: Whether Asset indoor or outdoor
                    deal_api_enabled:
                      type: boolean
                      description: Whether Asset is allowed for DV360
                    asset_type:
                      type: string
                      enum:
                        - STATIC
                        - SCROLLING
                        - DIGITAL
                      description: Type of Asset
                    venue_type:
                      type: string
                      enum:
                        - OOH_VENUE_UNSPECIFIED
                        - OOH_VENUE_AIRBORNE
                        - OOH_VENUE_AIRPORTS_GENERAL
                        - OOH_VENUE_AIRPORTS_BAGGAGE_CLAIM
                        - OOH_VENUE_AIRPORTS_TERMINAL
                        - OOH_VENUE_AIRPORTS_LOUNGES
                        - OOH_VENUE_ATMS
                        - OOH_VENUE_BACKLIGHTS
                        - OOH_VENUE_BARS
                        - OOH_VENUE_BENCHES
                        - OOH_VENUE_BIKE_RACKS
                        - OOH_VENUE_BULLETINS
                        - OOH_VENUE_BUSES
                        - OOH_VENUE_CAFES
                        - OOH_VENUE_CASUAL_DINING_RESTAURANTS
                        - OOH_VENUE_CHILD_CARE
                        - OOH_VENUE_CINEMA
                        - OOH_VENUE_CITY_INFORMATION_PANELS
                        - OOH_VENUE_CONVENIENCE_STORES
                        - OOH_VENUE_DEDICATED_WILD_POSTING
                        - OOH_VENUE_DOCTORS_OFFICES_GENERAL
                        - OOH_VENUE_DOCTORS_OFFICES_OBSTETRICS
                        - OOH_VENUE_DOCTORS_OFFICES_PEDIATRICS
                        - OOH_VENUE_FAMILY_ENTERTAINMENT
                        - OOH_VENUE_FERRIES
                        - OOH_VENUE_FINANCIAL_SERVICES
                        - OOH_VENUE_GAS_STATIONS
                        - OOH_VENUE_GOLF_COURSES
                        - OOH_VENUE_GYMS
                        - OOH_VENUE_HOSPITALS
                        - OOH_VENUE_HOTELS
                        - OOH_VENUE_JUNIOR_POSTERS
                        - OOH_VENUE_KIOSKS
                        - OOH_VENUE_MALLS_GENERAL
                        - OOH_VENUE_MALLS_FOOD_COURTS
                        - OOH_VENUE_MARINE
                        - OOH_VENUE_MOBILE_BILLBOARDS
                        - OOH_VENUE_MOVIE_THEATER_LOBBIES
                        - OOH_VENUE_NEWSSTANDS
                        - OOH_VENUE_OFFICE_BUILDINGS
                        - OOH_VENUE_PHONE_KIOSKS
                        - OOH_VENUE_POSTERS
                        - OOH_VENUE_QSR
                        - OOH_VENUE_RAIL
                        - OOH_VENUE_RECEPTACLES
                        - OOH_VENUE_RESORTS
                        - OOH_VENUE_RETAIL
                        - OOH_VENUE_SALONS
                        - OOH_VENUE_SHELTERS
                        - OOH_VENUE_SPORTS_ARENAS
                        - OOH_VENUE_SUBWAY
                        - OOH_VENUE_TAXIS
                        - OOH_VENUE_TRUCKSIDE
                        - OOH_VENUE_UNIVERSITIES
                        - OOH_VENUE_URBAN_PANELS
                        - OOH_VENUE_VETERINARIAN_OFFICES
                        - OOH_VENUE_WALLS
                        - OOH_VENUE_OTHER
                      description: Venue Type of Asset
                    display_offset:
                      type: string
                      enum:
                        - MONDAY
                        - TUESDAY
                        - WEDNESDAY
                        - THURSDAY
                        - FRIDAY
                        - SATURDAY
                        - SUNDAY
                      description: Display Offset of Asset
                    site_type_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Site Type
                    model_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Model
                    postcode_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Postcode
                    district_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the District
                    tv_area_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the TV Area
                    conurbation_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Conurbation
                    route_town_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Route Town
                    product_format_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Product Format
                    digital_spec_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Digital Spec
                    loop_policy_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Loop Policy
                    frame_orientation_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Frame Orientation
                    frame_size_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Frame Size
                    geographical_area_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Geographical Area
                    frame_alt_code:
                      type: string
                      maxLength: 50
                      description: FrameAltCode of Asset
                    programmatic_network_uuid:
                      type: string
                      minLength: 1
                      maxLength: 50
                      description: Market Universal ID of the Programmatic Network
                    venue_taxonomy_enumeration_id:
                      type: integer
                      description: Enumeration ID of the Venue Taxonomy
                    digital_players:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/digital_players/item\
                          s"
                      description: Digital Player List of the Asset
                    tags:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Tag
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Tag
                          tag_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Tag
                        required:
                          - start_date
                          - end_date
                          - tag_uuid
                      description: Tag List of the Asset
                    statuses:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/statuses/items"
                      description: Status List of the Asset
                    time_models:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/time_models/items"
                      description: Time Model List of the Asset
                    allotments:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/allotments/items"
                      description: Allotment List of the Asset
                    prices:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Price
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Price
                          days:
                            type: array
                            items:
                              type: string
                              enum:
                                - MONDAY
                                - TUESDAY
                                - WEDNESDAY
                                - THURSDAY
                                - FRIDAY
                                - SATURDAY
                                - SUNDAY
                          day_part_code:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the DayPart
                          price_type:
                            type: string
                            enum:
                              - STANDARD
                              - TACTICAL_DAY_PART
                              - TACTICAL_FULL_DAY
                              - RETAIL_ZONE_UPLIFT
                              - QUOD_VALUE_FACTOR
                              - FLAT_WEEK_PRICE
                              - FLAT_DAY_PRICE
                              - FLAT_HOUR_PRICE
                              - RATE_CARD_FACTOR
                              - FIXED_PRICE
                              - TOWN_FACTOR
                              - ZONE_PRICING
                              - BASE_CPT
                              - TECHNICAL_FEE
                              - PMP_CPT
                          price_cover:
                            type: number
                            format: double
                            minimum: 0
                            description: Price cover of the Asset Price
                          price:
                            type: number
                            format: double
                            minimum: 0
                            description: Price of the Asset Price
                        required:
                          - start_date
                          - end_date
                          - days
                          - price_type
                          - price_cover
                          - price
                      description: Price List of the Asset
                    prohibitions:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Prohibition
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Prohibition
                          product_category_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Product Category
                        required:
                          - start_date
                          - end_date
                          - product_category_uuid
                      description: Prohibition List of the Asset
                    prohibition_counters:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Prohibition Counter
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Prohibition Counter
                          product_category_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Product Category
                          organisation_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Organisation
                        required:
                          - start_date
                          - end_date
                          - product_category_uuid
                          - organisation_uuid
                      description: Prohibition Counter List of the Asset
                    blacklists:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/blacklists/items"
                      description: Blacklist List of the Asset
                    illumination_statuses:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/illumination_statuse\
                          s/items"
                      description: Illumination Status List of the Asset
                    offers:
                      type: array
                      items:
                        $ref: "#/paths/~1assets~1%7Basset-uuid%7D/get/responses/200/content/application\
                          ~1json/schema/allOf/0/properties/offers/items"
                      description: Offer List of the Asset
                    networks:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Network
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Network
                          network_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Network
                          price_factor:
                            type: number
                            format: double
                            minimum: 0
                            description: Price cover of the Asset Network
                        required:
                          - start_date
                          - end_date
                          - network_uuid
                          - price_factor
                      description: Network List of the Asset
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Product
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Product
                          product_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Product
                        required:
                          - start_date
                          - end_date
                          - product_uuid
                      description: Product List of the Asset
                    characteristics:
                      type: array
                      items:
                        type: object
                        properties:
                          start_date:
                            type: string
                            format: date
                            description: Start Date of the Asset Characteristic
                          end_date:
                            type: string
                            format: date
                            description: End Date of the Asset Characteristic
                          characteristic_uuid:
                            type: string
                            minLength: 1
                            maxLength: 50
                            description: Market Universal ID of the Characteristic
                        required:
                          - start_date
                          - end_date
                          - characteristic_uuid
                      description: Characteristic List of the Asset
                - type: object
                  required:
                    - address_detail_1
                    - longitude
                    - latitude
                    - product_format_uuid
      responses:
        "201":
          description: Created if the Asset not existing before and created successfully
        "204":
          description: No Content if the Asset existing before and created successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateAssetByUUID
      tags:
        - Asset
      summary: Partial Update Asset
      description: Partial Update Asset
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Asset
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1assets~1%7Basset-uuid%7D/put/requestBody/content/application~1\
                    json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Asset updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Asset could not be found in the system
  "/assets/{asset-uuid}/duplications":
    get:
      operationId: getAssetDuplicationsByUUID
      tags:
        - Asset
      summary: Get Asset Duplications by asset-uuid
      description: Returns the Asset Duplications
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Duplications of the specified Asset
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/paths/~1assets~1%7Basset-1-uuid%7D~1duplications~1%7Basset-2-uuid%7D/g\
                    et/responses/200/content/application~1json/schema"
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Asset could not be found in the system
  "/assets/{asset-uuid}/postMigration":
    patch:
      operationId: partialUpdateAssetByUUIDPostMigration
      tags:
        - Asset
      summary: Partial Update Asset Post Migration
      description: Partial Update Asset Post Migration
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Asset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                indoor:
                  type: boolean
                  description: Whether Asset indoor or outdoor
                deal_api_enabled:
                  type: boolean
                  description: Whether Asset is allowed for DV360
                venue_type:
                  type: string
                  enum:
                    - OOH_VENUE_UNSPECIFIED
                    - OOH_VENUE_AIRBORNE
                    - OOH_VENUE_AIRPORTS_GENERAL
                    - OOH_VENUE_AIRPORTS_BAGGAGE_CLAIM
                    - OOH_VENUE_AIRPORTS_TERMINAL
                    - OOH_VENUE_AIRPORTS_LOUNGES
                    - OOH_VENUE_ATMS
                    - OOH_VENUE_BACKLIGHTS
                    - OOH_VENUE_BARS
                    - OOH_VENUE_BENCHES
                    - OOH_VENUE_BIKE_RACKS
                    - OOH_VENUE_BULLETINS
                    - OOH_VENUE_BUSES
                    - OOH_VENUE_CAFES
                    - OOH_VENUE_CASUAL_DINING_RESTAURANTS
                    - OOH_VENUE_CHILD_CARE
                    - OOH_VENUE_CINEMA
                    - OOH_VENUE_CITY_INFORMATION_PANELS
                    - OOH_VENUE_CONVENIENCE_STORES
                    - OOH_VENUE_DEDICATED_WILD_POSTING
                    - OOH_VENUE_DOCTORS_OFFICES_GENERAL
                    - OOH_VENUE_DOCTORS_OFFICES_OBSTETRICS
                    - OOH_VENUE_DOCTORS_OFFICES_PEDIATRICS
                    - OOH_VENUE_FAMILY_ENTERTAINMENT
                    - OOH_VENUE_FERRIES
                    - OOH_VENUE_FINANCIAL_SERVICES
                    - OOH_VENUE_GAS_STATIONS
                    - OOH_VENUE_GOLF_COURSES
                    - OOH_VENUE_GYMS
                    - OOH_VENUE_HOSPITALS
                    - OOH_VENUE_HOTELS
                    - OOH_VENUE_JUNIOR_POSTERS
                    - OOH_VENUE_KIOSKS
                    - OOH_VENUE_MALLS_GENERAL
                    - OOH_VENUE_MALLS_FOOD_COURTS
                    - OOH_VENUE_MARINE
                    - OOH_VENUE_MOBILE_BILLBOARDS
                    - OOH_VENUE_MOVIE_THEATER_LOBBIES
                    - OOH_VENUE_NEWSSTANDS
                    - OOH_VENUE_OFFICE_BUILDINGS
                    - OOH_VENUE_PHONE_KIOSKS
                    - OOH_VENUE_POSTERS
                    - OOH_VENUE_QSR
                    - OOH_VENUE_RAIL
                    - OOH_VENUE_RECEPTACLES
                    - OOH_VENUE_RESORTS
                    - OOH_VENUE_RETAIL
                    - OOH_VENUE_SALONS
                    - OOH_VENUE_SHELTERS
                    - OOH_VENUE_SPORTS_ARENAS
                    - OOH_VENUE_SUBWAY
                    - OOH_VENUE_TAXIS
                    - OOH_VENUE_TRUCKSIDE
                    - OOH_VENUE_UNIVERSITIES
                    - OOH_VENUE_URBAN_PANELS
                    - OOH_VENUE_VETERINARIAN_OFFICES
                    - OOH_VENUE_WALLS
                    - OOH_VENUE_OTHER
                  description: Venue Type of Asset
                digital_spec_uuid:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Market Universal ID of the Digital Spec
                programmatic_network_uuid:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Market Universal ID of the Programmatic Network
                venue_taxonomy_enumeration_id:
                  type: integer
                  description: Enumeration ID of the Venue Taxonomy
      responses:
        "204":
          description: No Content if the Asset updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                c ode: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Asset could not be found in the system
  "/visualUnits/{visual-unit-uuid}":
    get:
      operationId: getVisualUnitByUUID
      tags:
        - Visual Units
      summary: Get Visual Unit by visual-unit-uuid
      description: Returns the Visual Unit
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: visual-unit-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Visual Unit
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Visual Unit
          content:
            application/json:
              schema:
                type: object
                properties:
                  visual_unit_uuid:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: Visual Unit Code
                  asset_uuids:
                    type: array
                    items:
                      type: string
                    description: Set of Asset Universal IDs which belongs to this Visual Unit
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: visual-unit-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Visual Unit could not be found in the
            system
  "/linkedAssets/{linked-asset-uuid}":
    get:
      operationId: getLinkedAssetByUUID
      tags:
        - Linked Assets
      summary: Get Linked Assets by linked-asset-uuid
      description: Returns the Linked Assets
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: linked-asset-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Linked Assets
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Linked Assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  linked_asset_uuid:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: Linked Asset Code
                  asset_uuids:
                    type: array
                    items:
                      type: string
                    description: Set of Asset Universal IDs which belongs to this Linked Asset
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: linked-asset-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Linked Asset could not be found in the
            system
  "/assets/{asset-1-uuid}/duplications/{asset-2-uuid}":
    get:
      operationId: getDuplicationByAssetUUIDs
      tags:
        - Asset Duplication
      summary: Get Duplications by asset-1-uuid and asset-2-uuid
      description: Returns the Duplication
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - name: asset-1-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-1
        - name: asset-2-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-2
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Duplication
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      duplication:
                        type: boolean
                        description: Duplication or not
                      juxta:
                        type: boolean
                        description: Juxta or not
                  - properties:
                      asset_1_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Asset-1
                      asset_2_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Asset-2
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Asset Duplication
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-1-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Asset could not be found in the system
            or no Duplication
    put:
      operationId: createOrUpdateDuplicationByAssetUUIDs
      tags:
        - Asset Duplication
      summary: Create Or Update Duplication
      description: Create Or Update Duplication
      parameters:
        - name: env-id
          in: header
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - name: asset-1-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-1
        - name: asset-2-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-2
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Duplication
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1assets~1%7Basset-1-uuid%7D~1duplications~1%7Basset-2-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - duplication
                    - juxta
      responses:
        "201":
          description: Created if the Asset Duplication not existing before and created
            successfully
        "204":
          description: No Content if the Asset Duplication existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-1-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateDuplicationByAssetUUIDs
      tags:
        - Asset Duplication
      summary: Partial Update Duplication
      description: Partial Update Duplication
      parameters:
        - name: env-id
          in: header
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - name: asset-1-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-1
        - name: asset-2-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-2
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Asset
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1assets~1%7Basset-1-uuid%7D~1duplications~1%7Basset-2-uuid%7D/g\
                    et/responses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Asset Duplication updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-1-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Duplication could not be found in the
            system
    delete:
      operationId: deleteDuplicationByAssetUUIDs
      tags:
        - Asset Duplication
      summary: Delete Duplication
      description: Delete Duplication
      parameters:
        - name: env-id
          in: header
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - name: asset-1-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-1
        - name: asset-2-uuid
          in: path
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Asset-2
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Asset Duplication deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: asset-1-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Duplication could not be found in the
            system
  /programmaticNetworks:
    get:
      operationId: getAllProgrammaticNetwork
      tags:
        - Programmatic Network
      summary: Get All Programmatic Network
      description: Returns list of Programmatic Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: query
          name: pageNo
          schema:
            type: integer
            default: 0
          description: The requested page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: Number of items in the returned page
        - in: query
          name: sortBy
          schema:
            type: string
            default: id
          description: Sorted by field
        - in: query
          name: sortDir
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: |
            Sort order:
             * `asc` - Ascending, from A to Z
             * `desc` - Descending, from Z to A
        - in: query
          name: search
          schema:
            type: string
            default: null
          description: >
            Available search fields:
             * `name`  - It takes String value.
             * `programmatic_network_uuid`  - It takes String value.
             * `programmatic_network_url`  - It takes String value.
             * `update_stamp`  - It takes Integer value. <br>
            For further RSQL query options, please visit https://github.com/jirutka/rsql-parser#examples
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested List of Programmatic Network
          headers:
            TOTAL-PAGE:
              schema:
                type: integer
              description: Total Number of Available Pages
            SORT-BY:
              schema:
                type: string
              description: Sorted by field
            SORT-DIR:
              schema:
                type: string
                default: asc
                enum:
                  - asc
                  - desc
              description: Sort Order
            TOTAL-ELEMENTS-IN-CURRENT-PAGE:
              schema:
                type: integer
              description: Total number of elements returned in the current page
            PAGE-SIZE:
              schema:
                type: integer
              description: Number of elements in a page
            CURRENT-PAGE:
              schema:
                type: integer
              description: The current page index
            TOTAL-ELEMENTS:
              schema:
                type: integer
              description: The total number of available elements
          content:
            application/json:
              schema:
                type: object
                properties:
                  programmatic_network_list:
                    type: array
                    items:
                      $ref: "#/paths/~1programmaticNetworks~1%7Bprogrammatic-network-uuid%7D/get/resp\
                        onses/200/content/application~1json/schema"
                    description: List of the ProgrammaticNetwork
  "/programmaticNetworks/{programmatic-network-uuid}":
    get:
      operationId: getProgrammaticNetworkByUUID
      tags:
        - Programmatic Network
      summary: Get Programmatic Network by programmatic-network-uuid
      description: Returns the Programmatic Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: programmatic-network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Programmatic Network
      security:
        - bearerAuth:
            - uid
      responses:
        "200":
          description: Returns requested Programmatic Network
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Name of the Programmatic Network
                      programmatic_network_url:
                        type: string
                        minLength: 1
                        maxLength: 100
                        description: Network URL of the Programmatic Network
                  - properties:
                      programmatic_network_uuid:
                        type: string
                        minLength: 1
                        maxLength: 50
                        description: Market Universal ID of the Programmatic Network
                      update_stamp:
                        type: integer
                        format: int64
                        description: Last update stamp of Programmatic Network
                  - type: object
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: programmatic-network-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Programmatic Network could not be found
            in the system
    put:
      operationId: createOrUpdateProgrammaticNetworkByUUID
      tags:
        - Programmatic Network
      summary: Create Or Update Programmatic Network
      description: Create Or Update Programmatic Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: programmatic-network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Programmatic Network
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Programmatic Network
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1programmaticNetworks~1%7Bprogrammatic-network-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
                  required:
                    - name
            example:
              name: Males Only
      responses:
        "201":
          description: Created if the Programmatic Network not existing before and created
            successfully
        "204":
          description: No Content if the Programmatic Network existing before and created
            successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: programmatic-network-uuid must be between 1 and 50
    patch:
      operationId: partialUpdateProgrammaticNetworkByUUID
      tags:
        - Programmatic Network
      summary: Partial Update Programmatic Network
      description: Partial Update Programmatic Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: programmatic-network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Programmatic Network
      security:
        - bearerAuth:
            - uid
      requestBody:
        description: Programmatic Network
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/paths/~1programmaticNetworks~1%7Bprogrammatic-network-uuid%7D/get/resp\
                    onses/200/content/application~1json/schema/allOf/0"
                - type: object
      responses:
        "204":
          description: No Content if the Programmatic Network updated successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2300
                error_type: INVALID_PATH_VARIABLE
                message: programmatic-network-uuid must be between 1 and 50
        "404":
          description: Not Found, if the specified Programmatic Network could not be found
            in the system
    delete:
      operationId: deleteProgrammaticNetworkByUUID
      tags:
        - Programmatic Network
      summary: Delete Programmatic Network
      description: Delete Programmatic Network
      parameters:
        - in: header
          name: env-id
          schema:
            type: string
          required: true
          description: Market Universal ID of the Tenant
        - in: path
          name: programmatic-network-uuid
          schema:
            type: string
            minLength: 1
            maxLength: 50
          required: true
          description: Market Universal ID of the Programmatic Network
      security:
        - bearerAuth:
            - uid
      responses:
        "204":
          description: No Content if the Programmatic Network deleted successfully
        "400":
          description: Bad Request, if the request not proper
          content:
            application/json:
              schema:
                $ref: "#/paths/~1audienceCategoryGroups~1%7Baudience-category-group-uuid%7D~1au\
                  dienceCategories/get/responses/400/content/application~1json/\
                  schema"
              example:
                code: 2600
                error_type: DEFAULT
                message: "Referential Integrity: ProgrammaticNetwork[...] cannot be deactivated.
                  It is still in use by Assets[...]"
        "404":
          description: Not Found, if the specified Programmatic Network could not be found
            in the system
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
